import React, { useEffect, useState } from 'react';
// import axios from 'axios';
import Web3 from 'web3';
import { useHistory, useParams } from 'react-router-dom';
import SimpleCarousel from 'react-simply-carousel';
import { useWeb3React } from '@web3-react/core';

import useTheme from '@material-ui/core/styles/useTheme';
import useMediaQuery from '@material-ui/core/useMediaQuery';

import { useTypedSelector } from 'store/reducers/Reducer';
import { ProposalPodCard } from 'components/MusicDao/components/Cards/ProposalPodCard';
// import NewDistributionModal from 'components/MusicDao/modals/NewDistributionModal';
import CreateProposal from 'components/MusicDao/modals/CreateProposal';
import PodHeader from './Header';
import Owners from './Owners';
import PodArtists from './Artists';
// import Staking from "./SubPages/Staking";
// import Investments from './SubPages/Investments';
// import Investments from './SubPages/NewInvestments';
// import Discussion from './SubPages/Discussion';
// import Chat from './SubPages/Chat';
// import Copyright from './SubPages/Copyright';
// import { Media } from './SubPages/Media';
// import Governance from './SubPages/Governance';
import Discord from './Discord';
import { WorkSpace } from './WorkSpace';
import { Claim } from './Claim';

import Box from 'shared/ui-kit/Box';
import { InfoTooltip } from 'shared/ui-kit/InfoTooltip';
import { LoadingWrapper } from 'shared/ui-kit/Hocs/LoadingWrapper';
import {
  musicDaoAcceptInvitation,
  musicDaoAddChainInfo,
  musicDaoGetPod,
  musicDaoGetStaking
} from 'shared/services/API';
import { Gradient, SecondaryButton } from 'shared/ui-kit';
// import { default as ServerURL } from 'shared/functions/getURL';
import { BlockchainNets } from 'shared/constants/constants';
import { getPodStatus } from 'shared/functions/utilsMusicDao';
import { switchNetwork } from 'shared/functions/metamask';
// import { useAlertMessage } from 'shared/hooks/useAlertMessage';
// import { useAuth } from 'shared/contexts/AuthContext';
import { onGetNonDecrypt } from 'shared/ipfs/get';
import { _arrayBufferToBase64 } from 'shared/functions/commonFunctions';
import useIPFS from 'shared/utils-IPFS/useIPFS';
import getIPFSURL from 'shared/functions/getIPFSURL';
// import CustomButtonWithTooltip from 'shared/ui-kit/CustomButtonWithTooltip';
import { processImage } from 'shared/helpers';

import { usePodDetailStyles } from './index.styles';

const PODSTABOPTIONS = [
  {
    title: 'Media',
    description: 'Upload Music',
    tooltip:
      'This tab is public. Artists and Capsule owners can upload music as editable draft NFTs. Once the Capsule is funded and the funding date has been reached, artists can mint the NFTs.'
  },
  {
    title: 'Governance',
    description: 'Stake to Earn',
    tooltip:
      'This tab is private to media fraction holders. Media fraction holders stake media fractions or can create and stake media fraction NFTs to access revenue generated by the Capsules based on the governance decisions of the Capsule, in particular, NFT sale proposals.'
  },
  {
    title: 'Fundraise',
    description: 'Invest in the Capsule',
    tooltip:
      'Media This shows the investment progress of the Capsule, where fans invest in the Capsule, and later, claim media fractions (if Capsule is funded) or get their money back (if Capsule is not funded).'
  },
  {
    title: 'Capsule Chat',
    description: 'Share and Grow',
    tooltip:
      'Create wall posts and push updates of the Capsule to media fraction holders. Create discussion rooms and poll token holders.'
  },
  {
    title: 'Owners Chat',
    description: 'Internal discussion',
    tooltip:
      'This is an internal chat between owners of the Capsule (artists and collabs). This is where withdrawal proposals are voted on and initiated from funds raised.'
  },
  {
    title: 'Media Fractions',
    description: 'Ownership distribution',
    tooltip:
      'This tab shows all media fraction token holders and the distribution of ownership'
  }
];

const PodDetailsPage = () => {
  const classes = usePodDetailStyles();
  // const { showAlertMessage } = useAlertMessage();
  const history = useHistory();

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));
  const isTablet = useMediaQuery(theme.breakpoints.down('sm'));

  const params: any = useParams();
  const user = useTypedSelector((state) => state.user);
  // const { isSignedin } = useAuth();

  const [podMenuSelection, setPodMenuSelection] = useState<any>(
    PODSTABOPTIONS[0]
  );
  const [pod, setPod] = useState<any>();
  const [podInfo, setPodInfo] = useState<any>(null);
  const [followed, setFollowed] = useState<boolean>(false);

  const [generalChat, setGeneralChat] = useState<string>('');

  const [activeSlide, setActiveSlide] = useState<number>(0);
  // const [discussions, setDiscussions] = useState<any>();
  const [openDistributionTopic, setOpenDistributionTopic] = useState<boolean>(
    false
  );
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const [stakings, setStakings] = useState<any>([]);

  const [fundingEnded, setFundingEnded] = useState<boolean>(false);
  const [fundingEndTime, setFundingEndTime] = useState<any>({
    days: 0,
    hours: 0,
    minutes: 0,
    seconds: 0
  });

  const { library, chainId } = useWeb3React();
  const podId = params?.podId;
  const { ipfs, setMultiAddr, downloadWithNonDecryption } = useIPFS();

  const [imageIPFS, setImageIPFS] = useState('');

  const [noReloadPage, setNoReloadPage] = useState<boolean>(false);

  const isReached = React.useMemo(
    () =>
      pod &&
      pod.FundingDate &&
      pod.FundingDate < Math.trunc(Date.now() / 1000) &&
      (pod.RaisedFunds || 0) >= pod.FundingTarget,
    [pod]
  );

  const isFunded = React.useMemo(
    () => pod && (pod.RaisedFunds || 0) >= pod.FundingTarget,
    [pod]
  );

  const isAllVoted = React.useMemo(() => {
    if (!pod) return false;
    const creatorsCount = pod.CreatorsData?.length ?? 0;
    if (creatorsCount < 2) return false;
    return pod.CreatorsData.find(
      (item) => item.vote !== true && item.vote !== false
    )
      ? false
      : true;
  }, [pod]);

  const isCreatorOrCollab = React.useMemo(() => {
    if (!pod || !user) return false;

    const isCollab =
      pod.Collabs.filter(
        (collab) => collab.address.toLowerCase() === user.address.toLowerCase()
      ).length > 0;
    return pod.creatorId === user.id || isCollab;
  }, [pod, user]);

  React.useEffect(() => {
    if (pod && pod.distributionProposalAccepted === false) {
      if (!user) {
        history.push('/capsules');
        return;
      }
      const isCollab =
        pod.Collabs.filter(
          (collab) =>
            collab.address?.toLowerCase() === user.address?.toLowerCase()
        )?.length > 0;
      if (!isCollab) history.push('/capsules');
    }
  }, [pod, user]);

  const [isExpired, setExpired] = useState<boolean>(true);
  const [curSelHeaderMenuItem, setCurSelHeaderMenuItem] = useState<string>(
    'music'
  );

  useEffect(() => {
    setMultiAddr(`${getIPFSURL()}/api/v0`);
  }, []);

  useEffect(() => {
    if (podId && ipfs && Object.keys(ipfs).length !== 0) {
      if (!isLoading) {
        loadData();
      }
    }
  }, [user, podId, ipfs]);

  useEffect(() => {
    if (pod?.FundingDate) {
      const timerId = setInterval(() => {
        const now = new Date();
        let delta = Math.floor(pod.FundingDate - now.getTime() / 1000);

        if (delta < 0) {
          setFundingEnded(true);
          setFundingEndTime({
            days: 0,
            hours: 0,
            minutes: 0,
            seconds: 0
          });
          clearInterval(timerId);
        } else {
          let days = Math.floor(delta / 86400);
          delta -= days * 86400;

          // calculate (and subtract) whole hours
          let hours = Math.floor(delta / 3600) % 24;
          delta -= hours * 3600;

          // calculate (and subtract) whole minutes
          let minutes = Math.floor(delta / 60) % 60;
          delta -= minutes * 60;

          // what's left is seconds
          let seconds = delta % 60;
          setFundingEnded(false);
          setFundingEndTime({
            days,
            hours,
            minutes,
            seconds
          });
        }
        const status = getPodStatus(pod);
        if (pod.status !== status) {
          setPod((prev) => ({ ...prev, status: getPodStatus(pod) }));
        }
      }, 1000);

      return () => clearInterval(timerId);
    }
  }, [pod?.FundingDate]);

  useEffect(() => {
    if (!pod || !pod.PodAddress) return;

    const status = getPodStatus(pod);
    if (pod.status !== status) {
      setPod((prev) => ({ ...prev, status: getPodStatus(pod) }));
    }
  }, [pod, pod?.PodAddress]);

  useEffect(() => {
    if (user.id && pod && pod.Id) {
      // If the invited user didn't accept the proposal and directly go into the pod, then accept it automatically.
      const isInvitedUser = pod.CreatorsData.find(
        (item) => item.id === user.id
      );
      const isAccepted = pod.Collabs.find((item) => item.userId === user.id);
      if (
        !isInvitedUser &&
        (pod.isProposal !== undefined
          ? pod.isProposal
          : !pod.distributionProposalAccepted)
      ) {
        history.push('/capsules');
      }

      if (isInvitedUser && !isAccepted) {
        musicDaoAcceptInvitation({
          podId: pod.Id
        }).then((acceptResponse) => {
          if (acceptResponse.success) {
            loadData();
          }
        });
      } else {
        const followers: any[] = pod.Followers ?? [];
        setFollowed(
          followers.find((followerData) => followerData.id == user.id) !=
            undefined
        );
      }
    }
  }, [user.id, pod]);

  const getImageIPFS = async (cid: string, fileName: string) => {
    let files = await onGetNonDecrypt(cid, fileName, (fileCID, download) =>
      downloadWithNonDecryption(fileCID, download)
    );
    if (files) {
      let base64String = _arrayBufferToBase64(files.buffer);
      if (fileName?.slice(-4) === '.gif') {
        setImageIPFS('data:image/gif;base64,' + base64String);
      } else {
        setImageIPFS('data:image/png;base64,' + base64String);
      }
    }
  };

  // const createNewTopic = (title, description) => {
  //   axios
  //     .post(`${ServerURL()}/podDiscussion/new/newChat`, {
  //       title,
  //       description,
  //       podId,
  //       createdBy: user.id,
  //       podType: 'TRAX'
  //     })
  //     .then((response) => {
  //       const resp = response.data.data;
  //       const newDiscussionData = [
  //         { id: resp.topicId, ...resp.topicData },
  //         ...discussions
  //       ];
  //       setDiscussions(newDiscussionData);
  //     });
  // };

  const loadData = async () => {
    if (podId) {
      try {
        if (!noReloadPage) {
          setIsLoading(true);
        }
        const resp = await musicDaoGetPod(podId);
        if (resp?.success) {
          let podData = resp.data;

          const cur = new Date().getTime() - podData.Created;
          const deadline =
            podData.ProposalDeadline?._seconds * 1000 - podData.Created;
          if (cur > deadline) {
            setExpired(true);
          } else {
            setExpired(false);
          }

          podData.status = getPodStatus(podData);

          if (!podData.distributionProposalAccepted) {
            let privateChats: any[] = podData.PrivateChats;

            let generalChat: any = privateChats?.find(
              (chat) => chat.title === 'General'
            );
            if (generalChat && generalChat.id) {
              setGeneralChat(generalChat.id);
            }
          }
          setPod({ ...podData });
          if (podData.PodChainInfo) {
            setPodInfo(podData.PodChainInfo);
          } else if (podData.podAddress) {
            const targetChain = BlockchainNets[1];
            if (chainId && chainId !== targetChain?.chainId) {
              const isHere = await switchNetwork(targetChain?.chainId || 0x89);
              if (!isHere) {
                //showAlertMessage("Got failed while switching over to target network", { variant: "error" });
                return;
              }
            }

            const web3APIHandler = targetChain.apiHandler;
            if (library) {
              const web3 = new Web3(library.provider);

              const info = await web3APIHandler?.PodManager.getPodInfo(web3, {
                podAddress: podData.PodAddress,
                fundingToken: podData.FundingToken
              });

              if (info) {
                const stakingGovernance = await web3APIHandler?.DistributionManager.stakingGovernance(
                  web3,
                  {
                    contractAddress: info.distributionManagerAddress
                  }
                );
                const stakingERC721 = await web3APIHandler?.DistributionManager.stakingERC721(
                  web3,
                  {
                    contractAddress: info.distributionManagerAddress
                  }
                );
                setPodInfo({ ...info, stakingERC721, stakingGovernance });

                await musicDaoAddChainInfo({
                  podId: podData.Id,
                  podChainInfo: { ...info, stakingERC721, stakingGovernance }
                });
              }
            }
          }

          if (
            podData?.InfoImage?.newFileCID &&
            podData?.InfoImage?.metadata?.properties?.name
          ) {
            getImageIPFS(
              podData.InfoImage.newFileCID,
              podData.InfoImage.metadata.properties.name
            );
          }
        } else {
          setPod(undefined);
        }

        // load staking positions
        const response = await musicDaoGetStaking(podId);
        if (response?.success) {
          setStakings(response.data);
        }

        setIsLoading(false);
      } catch (error) {
        console.log(error);
        setIsLoading(false);
      }
    }
  };

  const handleRefresh = () => {
    loadData();
  };

  return (!isLoading && pod && !pod.PodAddress) || (pod && pod.PodAddress) ? (
    <Box className={classes.container}>
      <div className={classes.headerLeftBar}>
        <div
          className={classes.headerMenuIcon}
          onClick={() => setCurSelHeaderMenuItem('music')}
          style={{
            background: curSelHeaderMenuItem === 'music' ? '#0D59EE' : 'none'
          }}
        >
          <MusicIcon active={curSelHeaderMenuItem === 'music'} />
          <Box mt={0.5}>Music</Box>
        </div>
        {/* <div
              className={classes.headerMenuIcon}
              onClick={() => setCurSelHeaderMenuItem('claim')}
              style={{
                background:
                  curSelHeaderMenuItem === 'claim'
                    ? '#0D59EE'
                    : 'none'
              }}
            >
              <DolarIcon active={curSelHeaderMenuItem === 'claim'} />
            </div>
            {podData.status === 'Funded' && (
              <div className={classes.headerMenuIcon}>
                <DiscussionIcon active={curSelHeaderMenuItem === 'discussion'} />
              </div>
            )}
            {podData.status === 'Funded' && (
              <div className={classes.headerMenuIcon}>
                <ChatFillIcon active={curSelHeaderMenuItem === 'chat_fill'} />
              </div>
            )}*/}
        {isCreatorOrCollab &&
          pod.isProposal === false &&
          pod.Collabs.length > 1 && (
            <div
              className={classes.headerMenuIcon}
              onClick={() => setCurSelHeaderMenuItem('chat')}
              style={{
                background: curSelHeaderMenuItem === 'chat' ? '#0D59EE' : 'none'
              }}
            >
              <ChatLineIcon active={curSelHeaderMenuItem === 'chat_line'} />
              <Box mt={0.5}>Chat</Box>
            </div>
          )}
        {/* {podData.status === 'Funded' && (
              <div className={classes.headerMenuIcon}>
                <MusicMenuIcon active={curSelHeaderMenuItem === 'music_menu'} />
              </div>
            )}
            <div className={classes.headerMenuIcon}>
              <DolarIcon />
            </div> */}
      </div>
      <Box className={classes.subContainer} ml={7}>
        <PodHeader
          pod={{ ...pod, id: podId }}
          podInfo={podInfo}
          stakings={stakings}
          followed={followed}
          setFollowed={setFollowed}
          fundingEnded={fundingEnded}
          fundingEndTime={fundingEndTime}
          isFunded={isReached}
          imageIPFS={imageIPFS || processImage(pod.imageUrl)}
          onChangePhoto={getImageIPFS}
          isCreatorOrCollab={isCreatorOrCollab}
          refresh={loadData}
        />
        {curSelHeaderMenuItem === 'claim' && (
          <Box className={classes.mainContainer}>
            <Claim />
          </Box>
        )}
        {curSelHeaderMenuItem === 'chat' && (
          <Box className={classes.mainContainer}>
            <Box
              className={classes.flexBox}
              justifyContent="space-between"
              my={3}
            >
              <div className={classes.title2}>Discussion</div>
            </Box>
            {pod.Collabs.length > 1 && (
              <Box className={classes.discussionContent}>
                <Discord
                  podId={podId}
                  chatType={'PrivateChat'}
                  chatId={generalChat}
                  sidebar={false}
                  theme="dark"
                  imageIPFS={imageIPFS || processImage(pod.imageUrl)}
                />
              </Box>
            )}
          </Box>
          // <Box className={classes.mainContainer}>
          //   <Chat
          //     podId={podId}
          //     pod={pod}
          //     podInfo={podInfo}
          //     refreshPod={() => loadData()}
          //     openProposal={() => setPodMenuSelection('Proposals')}
          //   />
          // </Box>
        )}
        {curSelHeaderMenuItem !== 'chat' && (
          <>
            {pod.distributionProposalAccepted || pod.isProposal === false ? (
              <>
                <Box className={classes.mainContainer}>
                  <WorkSpace
                    pod={pod}
                    handleRefresh={loadData}
                    setNoReloadPage={setNoReloadPage}
                  />
                </Box>
                <Box className={classes.mainContainer}>
                  <Owners podId={podId} pod={pod} />
                </Box>
              </>
            ) : (
              <Box className={classes.mainContainer}>
                <PodArtists pod={pod} handleRefresh={loadData} />
              </Box>
            )}
          </>
        )}
        {/* {pod.distributionProposalAccepted && (
          <div className={classes.podSubPageHeader}>
            <Box className={`${classes.flexBox} ${classes.xscroll}`}>
              {PODSTABOPTIONS.map((item, index) => {
                if (
                  (item.title !== 'Owners Chat' || isCreatorOrCollab) &&
                  (item.title !== 'Governance' ||
                    (isCreatorOrCollab && isReached)) &&
                  (item.title !== 'Media Fractions' || isFunded) &&
                  (!(
                    item.title === 'Governance' ||
                    item.title === 'Capsule Chat' ||
                    item.title === 'Owners Chat' ||
                    item.title === 'Media Fractions'
                  ) ||
                    isSignedin) &&
                  (item.title !== 'Fundraise' || pod.WithFunding) &&
                  (item.title !== 'Governance' || pod.WithFunding)
                ) {
                  return (
                    <div onClick={() => setPodMenuSelection(item)}>
                      <CustomButtonWithTooltip
                        key={`pod-detail-tab-${index}`}
                        btnTitle={item.title}
                        btnDescription={item.description}
                        tooltip={item.tooltip}
                        overriedClasses={classes.tabBox}
                        isActive={podMenuSelection === item}
                      />
                    </div>
                  );
                }
              })}
            </Box>
          </div>
        )} */}
        <Box className={classes.mainContainer}>
          <div className={classes.podSubPageContent}>
            {/* {pod.distributionProposalAccepted && (
              <Box pt={1}>
                {podMenuSelection === PODSTABOPTIONS[0] && (
                  <Media
                    medias={pod.Medias}
                    pod={pod}
                    podInfo={podInfo}
                    handleRefresh={loadData}
                  />
                )}
                {podMenuSelection === PODSTABOPTIONS[1] && (
                  <Governance
                    pod={pod}
                    handleRefresh={loadData}
                    podInfo={podInfo}
                    stakings={stakings}
                  />
                )}
                {podMenuSelection === PODSTABOPTIONS[2] &&
                  podInfo &&
                  pod.WithFunding && (
                    <Investments
                      pod={pod}
                      podInfo={podInfo}
                      handleRefresh={loadData}
                    />
                  )}
                {podMenuSelection === PODSTABOPTIONS[3] && (
                  <Discussion
                    podId={podId}
                    pod={pod}
                    refreshPod={loadData}
                    isCreatorOrCollab={isCreatorOrCollab}
                  />
                )}
                {podMenuSelection === PODSTABOPTIONS[4] && (
                  <Chat
                    podId={podId}
                    pod={pod}
                    podInfo={podInfo}
                    refreshPod={() => loadData()}
                    openProposal={() => setPodMenuSelection('Proposals')}
                  />
                )}
                {podMenuSelection === PODSTABOPTIONS[5] && (
                  <Copyright
                    podId={podId}
                    pod={pod}
                    podInfo={podInfo}
                    refreshPod={() => loadData()}
                  />
                )}
              </Box>
            )} */}
            {pod.distributionProposalAccepted === false && isCreatorOrCollab && (
              <Box>
                <Box
                  display="flex"
                  alignItems="center"
                  justifyContent="space-between"
                >
                  <Box className={classes.title2}>All Proposals</Box>
                  {pod.Proposals && pod.Proposals.length !== 0 ? (
                    <Box display="flex" alignItems="center">
                      <Box
                        className={classes.arrowBox}
                        onClick={() =>
                          setActiveSlide((prev) => Math.max(0, prev - 1))
                        }
                      >
                        <LeftArrowIcon />
                      </Box>
                      <Box
                        style={{ transform: `rotate(180deg)` }}
                        className={classes.arrowBox}
                        ml="12px"
                        onClick={() =>
                          setActiveSlide((prev) =>
                            Math.min(pod.Proposals.length - 1, prev + 1)
                          )
                        }
                      >
                        <LeftArrowIcon />
                      </Box>
                    </Box>
                  ) : null}
                </Box>
                <Box width={1} overflow="hidden">
                  {!pod.Proposals || pod.Proposals.length === 0 ? (
                    <p
                      style={{
                        width: '100%',
                        marginTop: '30px',
                        textAlign: 'center',
                        color: 'white'
                      }}
                    >
                      No proposals yet
                    </p>
                  ) : (
                    <SimpleCarousel
                      containerProps={{
                        style: {
                          width: '100%',
                          justifyContent: 'flex-start'
                        }
                      }}
                      activeSlideIndex={activeSlide}
                      onRequestChange={setActiveSlide}
                      forwardBtnProps={{
                        style: {
                          display: 'none'
                        }
                      }}
                      backwardBtnProps={{
                        style: {
                          display: 'none'
                        }
                      }}
                      speed={400}
                      infinite={false}
                    >
                      {pod.Proposals.map((proposal, index) => {
                        return (
                          <Box pr={2} key={`proposals-${index}`}>
                            <ProposalPodCard
                              podId={podId}
                              pod={pod}
                              proposal={proposal}
                              handleRefresh={handleRefresh}
                              handleNewProposalModal={() =>
                                setOpenDistributionTopic(true)
                              }
                            />
                          </Box>
                        );
                      })}
                    </SimpleCarousel>
                  )}
                </Box>
                <Box
                  className={classes.flexBox}
                  justifyContent="space-between"
                  my={3}
                >
                  <div className={classes.title2}>Discussion</div>
                  {pod.distributionProposalAccepted === false && (
                    <Box display="flex" alignItems="center">
                      <SecondaryButton
                        size="medium"
                        onClick={() => setOpenDistributionTopic(true)}
                        isRounded
                        disabled={isExpired || !isAllVoted}
                        style={{
                          border: 'none',
                          background: 'black',
                          color: 'white'
                        }}
                      >
                        New Capsule Proposal
                      </SecondaryButton>
                      {!isAllVoted && (
                        <Box ml={2}>
                          <InfoTooltip
                            tooltip={
                              pod?.CreatorsData?.length < 2
                                ? 'You need to invite at least one collab.'
                                : 'All collabs need to accept invitation before creating proposal.'
                            }
                          />
                        </Box>
                      )}
                    </Box>
                  )}
                </Box>
                {pod.Collabs.length > 1 && (
                  <Box className={classes.discussionContent}>
                    <Discord
                      podId={podId}
                      chatType={'PrivateChat'}
                      chatId={generalChat}
                      sidebar={false}
                      theme="dark"
                      imageIPFS={imageIPFS || processImage(pod.imageUrl)}
                    />
                  </Box>
                )}
              </Box>
            )}
          </div>
        </Box>
      </Box>
      {openDistributionTopic && (
        <CreateProposal
          open={openDistributionTopic}
          onClose={() => setOpenDistributionTopic(false)}
          handleRefresh={handleRefresh}
          pod={pod}
          setPod={setPod}
        />
        // <NewDistributionModal
        //   pod={{ ...pod, FundingTarget: pod.RaiseValue ?? 0 }}
        //   podId={podId}
        //   open={openDistributionTopic}
        //   handleRefresh={handleRefresh}
        //   onClose={() => setOpenDistributionTopic(false)}
        //   createNewTopic={createNewTopic}
        // />
      )}
    </Box>
  ) : isLoading ? (
    <Box height={1} display="flex" alignItems="center">
      <LoadingWrapper loading />
    </Box>
  ) : (
    <Box
      display={'flex'}
      width={1}
      flexDirection="column"
      p={isTablet ? '32px 24px 56px' : '32px 52px 56px'}
      borderRadius="24px"
    >
      <Box
        style={{
          background: '#fff',
          border: '2.21591px solid #E2E5E9',
          borderRadius: '64px',
          padding: isTablet ? '15px 17px 8px' : '21px 25px 14px',
          width: 'fit-content',
          cursor: 'pointer'
        }}
        onClick={() => {
          history.goBack();
        }}
      >
        <LeftIcon />
      </Box>
      <Box
        display={'flex'}
        flexDirection="column"
        alignItems="center"
        justifyContent={'center'}
        mt={4}
        bgcolor="#fff"
      >
        <img
          width={'100%'}
          height={isMobile ? 212 : isTablet ? 291 : 467}
          src={require('assets/musicDAOImages/pod_not_supported_bg.webp')}
          alt="bgImage"
        />
        <Box
          display={'flex'}
          flexDirection="column"
          textAlign={'center'}
          pb={'200px'}
        >
          <Box className={classes.title4}>This POD version</Box>
          <Box className={classes.title5}>
            is not currently supported anymore
          </Box>
        </Box>
      </Box>
    </Box>
  );
};

const LeftArrowIcon = () => (
  <svg
    width="15"
    height="13"
    viewBox="0 0 15 13"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M6.13229 11.3846L1.0744 6.48479M1.0744 6.48479L6.13229 1.58496M1.0744 6.48479H13.9277"
      stroke="#181818"
      strokeWidth="1.5122"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);

const LeftIcon = () => (
  <svg
    width="12"
    height="21"
    viewBox="0 0 12 21"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M10.4545 19.364L1.59082 10.5004L10.4545 1.63672"
      stroke="#212121"
      stroke-width="2.95455"
      stroke-linecap="round"
      stroke-linejoin="round"
    />
  </svg>
);

const ShowMapIcon = () => (
  <svg
    width="23"
    height="20"
    viewBox="0 0 23 20"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M20.7275 7.67143C20.7275 4.90837 18.4876 2.66797 15.724 2.66797C13.3017 2.66797 11.2825 4.38963 10.8208 6.67566C10.7875 6.67506 10.7548 6.67056 10.7211 6.67056C7.4051 6.67056 4.7168 9.35886 4.7168 12.6746C4.7168 15.9903 7.4051 18.6786 10.7211 18.6786C14.0375 18.6786 16.7246 15.9903 16.7246 12.6746C16.7246 12.6404 16.7198 12.6079 16.7198 12.5737C19.0055 12.1129 20.7275 10.0935 20.7275 7.67143ZM10.7211 16.6775C8.51015 16.6775 6.71794 14.8853 6.71794 12.6749C6.71794 10.4642 8.51015 8.6723 10.7211 8.6723C10.756 8.6723 10.7887 8.68161 10.8232 8.68251C11.224 10.6344 12.761 12.1715 14.7126 12.5722C14.7135 12.6073 14.7234 12.6398 14.7234 12.6749C14.7234 14.8853 12.9309 16.6775 10.7211 16.6775ZM15.724 10.6734C14.0657 10.6734 12.722 9.32914 12.722 7.67143C12.722 6.01372 14.0657 4.66941 15.724 4.66941C17.3823 4.66941 18.726 6.01372 18.726 7.67143C18.726 9.32914 17.3823 10.6734 15.724 10.6734Z"
      fill="white"
    />
    <line
      x1="9.89491"
      y1="3.49023"
      x2="1.89492"
      y2="3.4933"
      stroke="white"
      strokeWidth="2"
    />
    <line
      x1="5.89453"
      y1="7.49023"
      x2="5.89453"
      y2="0.490234"
      stroke="white"
      strokeWidth="2"
    />
  </svg>
);

const MusicIcon = ({ active }) => (
  <svg
    width="12"
    height="18"
    viewBox="0 0 12 18"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M6 0V10.55C5.41 10.21 4.73 10 4 10C1.79 10 0 11.79 0 14C0 16.21 1.79 18 4 18C6.21 18 8 16.21 8 14V4H12V0H6Z"
      fill={active ? '#fff' : '#54658F'}
    />
  </svg>
);

const DolarIcon = ({ active }) => (
  <svg
    width="11"
    height="18"
    viewBox="0 0 11 18"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M5.80031 7.9C3.53031 7.31 2.80031 6.7 2.80031 5.75C2.80031 4.66 3.81031 3.9 5.50031 3.9C7.28031 3.9 7.94031 4.75 8.00031 6H10.2103C10.1403 4.28 9.09031 2.7 7.00031 2.19V0H4.00031V2.16C2.06031 2.58 0.500312 3.84 0.500312 5.77C0.500312 8.08 2.41031 9.23 5.20031 9.9C7.70031 10.5 8.20031 11.38 8.20031 12.31C8.20031 13 7.71031 14.1 5.50031 14.1C3.44031 14.1 2.63031 13.18 2.52031 12H0.320312C0.440312 14.19 2.08031 15.42 4.00031 15.83V18H7.00031V15.85C8.95031 15.48 10.5003 14.35 10.5003 12.3C10.5003 9.46 8.07031 8.49 5.80031 7.9Z"
      fill={active ? '#fff' : '#54658F'}
    />
  </svg>
);
const DiscussionIcon = ({ active }) => (
  <svg
    width="19"
    height="18"
    viewBox="0 0 19 18"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M18 15V16C18 17.1 17.1 18 16 18H2C0.89 18 0 17.1 0 16V2C0 0.9 0.89 0 2 0H16C17.1 0 18 0.9 18 2V3H9C7.89 3 7 3.9 7 5V13C7 14.1 7.89 15 9 15H18ZM9 13H19V5H9V13ZM13 10.5C12.17 10.5 11.5 9.83 11.5 9C11.5 8.17 12.17 7.5 13 7.5C13.83 7.5 14.5 8.17 14.5 9C14.5 9.83 13.83 10.5 13 10.5Z"
      fill={active ? '#fff' : '#54658F'}
    />
  </svg>
);
const ChatFillIcon = ({ active }) => (
  <svg
    width="20"
    height="20"
    viewBox="0 0 20 20"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M18 0H2C0.9 0 0 0.9 0 2V20L4 16H18C19.1 16 20 15.1 20 14V2C20 0.9 19.1 0 18 0Z"
      fill={active ? '#fff' : '#54658F'}
    />
  </svg>
);
const ChatLineIcon = ({ active }) => (
  <svg
    width="20"
    height="20"
    viewBox="0 0 20 20"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M18 0H2C0.9 0 0 0.9 0 2V20L4 16H18C19.1 16 20 15.1 20 14V2C20 0.9 19.1 0 18 0ZM18 14H4L2 16V2H18V14Z"
      fill={active ? '#fff' : '#54658F'}
    />
  </svg>
);
const MusicMenuIcon = ({ active }) => (
  <svg
    width="19"
    height="14"
    viewBox="0 0 19 14"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M12 0H0V2H12V0ZM12 4H0V6H12V4ZM0 10H8V8H0V10ZM14 0V8.18C13.69 8.07 13.35 8 13 8C11.34 8 10 9.34 10 11C10 12.66 11.34 14 13 14C14.66 14 16 12.66 16 11V2H19V0H14Z"
      fill={active ? '#fff' : '#54658F'}
    />
  </svg>
);

export default PodDetailsPage;
