{
  "address": "0x899A559B4c0B6d598e8A9Bbe0f2F7ddcbfbC639f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "LoyaltyERC1155Created",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allRoyalties",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "proofOfAuthenticity",
          "type": "string"
        }
      ],
      "name": "createRoyaltyERC1155",
      "outputs": [
        {
          "internalType": "address",
          "name": "loyalty",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "counter",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e5970552faafcf41031c4040254d5495f1668504c8e73728bfeb3ac31a62d1f",
  "receipt": {
    "to": null,
    "from": "0x283DdEa5589aba63221653D9ED02aaa7D60a389B",
    "contractAddress": "0x899A559B4c0B6d598e8A9Bbe0f2F7ddcbfbC639f",
    "transactionIndex": 1,
    "gasUsed": "3058360",
    "logsBloom": "0x
    "blockHash": "0xe78c39ac5740cd25d0b771ff3f0ca3cc5d59d77dc2af7d286b0509057041ac9a",
    "transactionHash": "0x0e5970552faafcf41031c4040254d5495f1668504c8e73728bfeb3ac31a62d1f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 22823809,
        "transactionHash": "0x0e5970552faafcf41031c4040254d5495f1668504c8e73728bfeb3ac31a62d1f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000283ddea5589aba63221653d9ed02aaa7d60a389b",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000015bb1fd983b4f80000000000000000000000000000000000000000000000000742765f971ab54400000000000000000000000000000000000000000000036d8d4d6ed6402450c1000000000000000000000000000000000000000000000000072cbb3fbd97004c00000000000000000000000000000000000000000000036d8d6329f619a805b9",
        "logIndex": 2,
        "blockHash": "0xe78c39ac5740cd25d0b771ff3f0ca3cc5d59d77dc2af7d286b0509057041ac9a"
      }
    ],
    "blockNumber": 22823809,
    "cumulativeGasUsed": "3092637",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "12ea7381dd9f15ec8161956523e83a40",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"LoyaltyERC1155Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allRoyalties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"proofOfAuthenticity\",\"type\":\"string\"}],\"name\":\"createRoyaltyERC1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"loyalty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RoyaltyFactory.sol\":\"RoyaltyFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x390521fa8ac0210850198bca62e009907bdc81cb74e618d052c4ac1afc89a2a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/ERC1155WithRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"./ERC1155WithRoyaltyCore.sol\\\";\\r\\n\\r\\ncontract ERC1155WithRoyalty is ERC1155WithRoyaltyCore, ERC1155, Ownable {\\r\\n    mapping(uint256 => string) private tokenToUri;\\r\\n\\r\\n    uint256 public counter;\\r\\n\\r\\n    mapping(uint256 => string) private _proofOfAuthenticity;\\r\\n\\r\\n    event RoyaltyNFT(\\r\\n        uint256 id,\\r\\n        address owner,\\r\\n        string uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps\\r\\n    );\\r\\n\\r\\n    constructor(string memory uri_)\\r\\n        ERC1155(uri_)\\r\\n    {}\\r\\n\\r\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royaltyConfigs)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setTokenRoyalties(royaltyConfigs);\\r\\n    }\\r\\n\\r\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setDefaultRoyalty(royalty);\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        string calldata uri\\r\\n    ) public {\\r\\n        counter += 1;\\r\\n        _mint(to, counter, amount, uri);\\r\\n    }\\r\\n\\r\\n    function mintWithId(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount,\\r\\n        string calldata uri\\r\\n    ) public {\\r\\n        _mint(to, tokenId, amount, uri);\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 amount\\r\\n    ) public onlyOwner {\\r\\n        _burn(from, id, amount);\\r\\n    }\\r\\n\\r\\n    function burnBatch(\\r\\n        address from,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts\\r\\n    ) public onlyOwner {\\r\\n        _burnBatch(from, ids, amounts);\\r\\n    }\\r\\n\\r\\n    function mintBatch(\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        string calldata data\\r\\n    ) public {\\r\\n        _mintBatch(to, ids, amounts, '');\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            tokenToUri[ids[i]] = data;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintBatchWithoutId(\\r\\n        address to,\\r\\n        uint256[] memory amounts,\\r\\n        string memory data\\r\\n    ) public {\\r\\n        counter += 1;\\r\\n        for (uint256 i = 0; i < amounts.length; i++) {\\r\\n            _mint(to, counter, amounts[i], '');\\r\\n            tokenToUri[counter] = data;\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function proofOfAuthenticity(uint256 id) public view returns (string memory) {\\r\\n        return _proofOfAuthenticity[id];\\r\\n    }\\r\\n\\r\\n    function mintWithRoyalty(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        string calldata uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps,\\r\\n        string calldata proofOfAuthenticity_\\r\\n    ) public {\\r\\n        require(amount <= 100, \\\"Amount can't be greater than 10!\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < amount; i++) {\\r\\n            counter += 1;\\r\\n            _mint(to, counter, 1, uri);\\r\\n            \\r\\n            TokenRoyaltyConfig[] memory config = new TokenRoyaltyConfig[](1);\\r\\n            config[0] = TokenRoyaltyConfig(counter, royaltyAddress, bps);\\r\\n            _setTokenRoyalties(config);\\r\\n\\r\\n            _proofOfAuthenticity[counter] = proofOfAuthenticity_;\\r\\n\\r\\n            emit RoyaltyNFT(counter, to, uri, royaltyAddress, bps);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC1155, ERC1155WithRoyaltyCore)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _mint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount,\\r\\n        string calldata uri\\r\\n    ) private {\\r\\n        super._mint(to, tokenId, amount, '');\\r\\n        tokenToUri[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\r\\n        return tokenToUri[tokenId];\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x65cf1516fe48402f5e6454eb488a6da3256a8f930d6e974a2079073b5e63b80b\",\"license\":\"MIT\"},\"contracts/ERC1155WithRoyaltyCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport \\\"./IERC1155WithRoyalty.sol\\\";\\r\\n\\r\\nabstract contract ERC1155WithRoyaltyCore is\\r\\n    IERC2981,\\r\\n    IERC1155WithRoyalty,\\r\\n    ERC165\\r\\n{\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    TokenRoyalty public defaultRoyalty;\\r\\n    mapping(uint256 => TokenRoyalty) private _tokenRoyalties;\\r\\n    EnumerableSet.UintSet private _tokensWithRoyalties;\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC165, IERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC2981).interfaceId ||\\r\\n            interfaceId == type(IERC1155WithRoyalty).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets token royalties. When you override this in the implementation contract\\r\\n     * ensure that you access restrict it to the contract owner or admin\\r\\n     */\\r\\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs)\\r\\n        internal\\r\\n    {\\r\\n        for (uint256 i = 0; i < royaltyConfigs.length; i++) {\\r\\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\\r\\n            require(royaltyConfig.bps < 10000, \\\"Invalid bps\\\");\\r\\n            if (royaltyConfig.recipient == address(0)) {\\r\\n                delete _tokenRoyalties[royaltyConfig.tokenId];\\r\\n                _tokensWithRoyalties.remove(royaltyConfig.tokenId);\\r\\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\\r\\n            } else {\\r\\n                _tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(\\r\\n                    royaltyConfig.recipient,\\r\\n                    royaltyConfig.bps\\r\\n                );\\r\\n                _tokensWithRoyalties.add(royaltyConfig.tokenId);\\r\\n                emit TokenRoyaltySet(\\r\\n                    royaltyConfig.tokenId,\\r\\n                    royaltyConfig.recipient,\\r\\n                    royaltyConfig.bps\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets default royalty. When you override this in the implementation contract\\r\\n     * ensure that you access restrict it to the contract owner or admin\\r\\n     */\\r\\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal {\\r\\n        require(royalty.bps < 10000, \\\"Invalid bps\\\");\\r\\n        defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\\r\\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\\r\\n     */\\r\\n    function getTokenRoyaltiesCount() external view override returns (uint256) {\\r\\n        return _tokensWithRoyalties.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\\r\\n     */\\r\\n    function getTokenRoyaltyByIndex(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (TokenRoyaltyConfig memory)\\r\\n    {\\r\\n        uint256 tokenId = _tokensWithRoyalties.at(index);\\r\\n        TokenRoyalty memory royalty = _tokenRoyalties[tokenId];\\r\\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\\r\\n     */\\r\\n    function royaltyInfo(uint256 tokenId, uint256 value)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address, uint256)\\r\\n    {\\r\\n        if (_tokenRoyalties[tokenId].recipient != address(0)) {\\r\\n            return (\\r\\n                _tokenRoyalties[tokenId].recipient,\\r\\n                (value * _tokenRoyalties[tokenId].bps) / 10000\\r\\n            );\\r\\n        }\\r\\n        if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\\r\\n            return (\\r\\n                defaultRoyalty.recipient,\\r\\n                (value * defaultRoyalty.bps) / 10000\\r\\n            );\\r\\n        }\\r\\n        return (address(0), 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb27db2d36a70fdc09d38cc7626422accc6ca077192a3512e4974ec904e071a41\",\"license\":\"MIT\"},\"contracts/IERC1155WithRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC1155WithRoyalty is IERC165 {\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties)\\n        external;\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index)\\n        external\\n        view\\n        returns (TokenRoyaltyConfig memory);\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\\n}\\n\",\"keccak256\":\"0xc3ff9a674d8ae1a9dc2d649a34c18d6e6ced36a2053dca049bbb434667b3ec9e\",\"license\":\"MIT\"},\"contracts/RoyaltyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./ERC1155WithRoyalty.sol\\\";\\r\\n\\r\\ncontract RoyaltyFactory {\\r\\n    address[] public allRoyalties;\\r\\n    uint256 royaltyCounter;\\r\\n\\r\\n    event LoyaltyERC1155Created(address nftAddress);\\r\\n\\r\\n    constructor() {\\r\\n        royaltyCounter = 0;\\r\\n    }\\r\\n\\r\\n    function createRoyaltyERC1155(\\r\\n        string calldata uri,\\r\\n        uint256 amount,\\r\\n        address royaltyAddress, \\r\\n        uint16 bps, \\r\\n        string calldata proofOfAuthenticity\\r\\n    )\\r\\n        external\\r\\n        returns (address loyalty, uint256 counter)\\r\\n    {\\r\\n        ERC1155WithRoyalty _loyalty = new ERC1155WithRoyalty(uri);\\r\\n        _loyalty.transferOwnership(msg.sender);\\r\\n\\r\\n        loyalty = address(_loyalty);\\r\\n        allRoyalties.push(loyalty);\\r\\n       \\r\\n        _loyalty.mintWithRoyalty(msg.sender, amount, uri, royaltyAddress, bps, proofOfAuthenticity);\\r\\n        emit LoyaltyERC1155Created(loyalty);\\r\\n\\r\\n        royaltyCounter++;\\r\\n        counter = royaltyCounter;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x93e26ffc8f7f4dd530325b2d554408da320b9c122ff5f607c754256a718443da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000600155613653806100256000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632f91b3ca1461003b578063aa18c4c614610072575b600080fd5b61004e6100493660046102c9565b61009d565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b61008561008036600461037a565b61024b565b6040516001600160a01b039091168152602001610069565b600080600089896040516100b090610275565b6100bb929190610419565b604051809103906000f0801580156100d7573d6000803e3d6000fd5b5060405163f2fde38b60e01b81523360048201529091506001600160a01b0382169063f2fde38b90602401600060405180830381600087803b15801561011c57600080fd5b505af1158015610130573d6000803e3d6000fd5b5050600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b038516908117909155604051639ca19ca560e01b81529395508593909250639ca19ca591506101b59033908c908f908f908e908e908e908e906004016103bb565b600060405180830381600087803b1580156101cf57600080fd5b505af11580156101e3573d6000803e3d6000fd5b50506040516001600160a01b03861681527f4c7afeb35ecbb8d358f788cbcf2aade0305add9fa1fee88faf6bd09e709ae36b9250602001905060405180910390a16001805490600061023483610435565b919050555060015491505097509795505050505050565b6000818154811061025b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6131c18061045d83390190565b60008083601f840112610293578182fd5b50813567ffffffffffffffff8111156102aa578182fd5b6020830191508360208285010111156102c257600080fd5b9250929050565b600080600080600080600060a0888a0312156102e3578283fd5b873567ffffffffffffffff808211156102fa578485fd5b6103068b838c01610282565b909950975060208a0135965060408a013591506001600160a01b038216821461032d578485fd5b90945060608901359061ffff82168214610345578485fd5b9093506080890135908082111561035a578384fd5b506103678a828b01610282565b989b979a50959850939692959293505050565b60006020828403121561038b578081fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060018060a01b03808b16835289602084015260c060408401526103e460c08401898b610392565b818816606085015261ffff8716608085015283810360a0850152610409818688610392565b9c9b505050505050505050505050565b60208152600061042d602083018486610392565b949350505050565b600060001982141561045557634e487b7160e01b81526011600452602481fd5b506001019056fe60806040523480156200001157600080fd5b50604051620031c1380380620031c1833981016040819052620000349162000164565b80620000408162000053565b506200004c336200006c565b506200028d565b805162000068906006906020840190620000be565b5050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000cc906200023a565b90600052602060002090601f016020900481019282620000f057600085556200013b565b82601f106200010b57805160ff19168380011785556200013b565b828001600101855582156200013b579182015b828111156200013b5782518255916020019190600101906200011e565b50620001499291506200014d565b5090565b5b808211156200014957600081556001016200014e565b6000602080838503121562000177578182fd5b82516001600160401b03808211156200018e578384fd5b818501915085601f830112620001a2578384fd5b815181811115620001b757620001b762000277565b604051601f8201601f19908116603f01168101908382118183101715620001e257620001e262000277565b816040528281528886848701011115620001fa578687fd5b8693505b828410156200021d5784840186015181850187015292850192620001fe565b828411156200022e57868684830101525b98975050505050505050565b600181811c908216806200024f57607f821691505b602082108114156200027157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612f24806200029d6000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80637885fdc7116100de578063e985e9c511610097578063f02a085711610071578063f02a085714610401578063f242432a14610414578063f2fde38b14610427578063f5298aca1461043a57600080fd5b8063e985e9c51461039f578063eb44350e146103db578063ef60ceaf146103ee57600080fd5b80637885fdc7146103015780637e980342146103435780638da5cb5b1461034b5780639ca19ca514610366578063a22cb46514610379578063d3fc98641461038c57600080fd5b80632eb2c2d61161014b5780635136dcc7116101255780635136dcc7146102ca57806361bc221a146102dd5780636b20c454146102e6578063715018a6146102f957600080fd5b80632eb2c2d61461028457806331a99766146102975780634e1273f4146102aa57600080fd5b8062fdd58e1461019257806301ffc9a7146101b85780630653aca5146101db5780630e89341c1461021d5780632a3a75fe1461023d5780632a55205a14610252575b600080fd5b6101a56101a03660046124d9565b61044d565b6040519081526020015b60405180910390f35b6101cb6101c63660046127c2565b6104e9565b60405190151581526020016101af565b6101ee6101e93660046128cd565b6104f4565b60408051825181526020808401516001600160a01b0316908201529181015161ffff16908201526060016101af565b61023061022b3660046128cd565b610579565b6040516101af9190612a6f565b61025061024b366004612426565b61061b565b005b6102656102603660046128e5565b6106bf565b604080516001600160a01b0390931683526020830191909152016101af565b610250610292366004612214565b610784565b6102306102a53660046128cd565b61081b565b6102bd6102b8366004612689565b610838565b6040516101af9190612a2e565b6102506102d8366004612753565b610999565b6101a560095481565b6102506102f436600461231b565b610a22565b610250610a5c565b600054610321906001600160a01b03811690600160a01b900461ffff1682565b604080516001600160a01b03909316835261ffff9091166020830152016101af565b6101a5610a92565b6007546040516001600160a01b0390911681526020016101af565b610250610374366004612559565b610aa3565b61025061038736600461249f565b610c4c565b61025061039a366004612502565b610d23565b6101cb6103ad3660046121e2565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102506103e936600461238b565b610d4c565b6102506103fc36600461285d565b610dd7565b61025061040f366004612635565b610e1b565b6102506104223660046122b9565b610e28565b6102506104353660046121c8565b610eaf565b610250610448366004612603565b610f47565b60006001600160a01b0383166104be5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526004602090815260408083206001600160a01b03861684529091529020545b92915050565b60006104e382610f7c565b604080516060810182526000808252602082018190529181018290529061051c600284610fbc565b6000818152600160209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b600081815260086020526040902080546060919061059690612d8f565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290612d8f565b801561060f5780601f106105e45761010080835404028352916020019161060f565b820191906000526020600020905b8154815290600101906020018083116105f257829003601f168201915b50505050509050919050565b60016009600082825461062e9190612d21565b90915550600090505b82518110156106b9576106848460095485848151811061066757634e487b7160e01b600052603260045260246000fd5b602002602001015160405180602001604052806000815250610fcf565b600954600090815260086020908152604090912083516106a692850190611f5e565b50806106b181612df0565b915050610637565b50505050565b60008281526001602052604081205481906001600160a01b031615610724576000848152600160205260409020546001600160a01b038116906127109061071190600160a01b900461ffff1686612d59565b61071b9190612d39565b9150915061077d565b6000546001600160a01b03161580159061074a5750600054600160a01b900461ffff1615155b15610776576000546001600160a01b038116906127109061071190600160a01b900461ffff1686612d59565b5060009050805b9250929050565b6001600160a01b0385163314806107a057506107a085336103ad565b6108075760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016104b5565b61081485858585856110a1565b5050505050565b6000818152600a6020526040902080546060919061059690612d8f565b6060815183511461089d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016104b5565b600083516001600160401b038111156108c657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108ef578160200160208202803683370190505b50905060005b84518110156109915761095685828151811061092157634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061094957634e487b7160e01b600052603260045260246000fd5b602002602001015161044d565b82828151811061097657634e487b7160e01b600052603260045260246000fd5b602090810291909101015261098a81612df0565b90506108f5565b509392505050565b6007546001600160a01b031633146109c35760405162461bcd60e51b81526004016104b590612be0565b610a1e8282808060200260200160405190810160405280939291908181526020016000905b82821015610a1457610a05606083028601368190038101906127fa565b815260200190600101906109e8565b5050505050611254565b5050565b6007546001600160a01b03163314610a4c5760405162461bcd60e51b81526004016104b590612be0565b610a57838383611427565b505050565b6007546001600160a01b03163314610a865760405162461bcd60e51b81526004016104b590612be0565b610a9060006115c2565b565b6000610a9e6002611614565b905090565b6064871115610af45760405162461bcd60e51b815260206004820181905260248201527f416d6f756e742063616e27742062652067726561746572207468616e2031302160448201526064016104b5565b60005b87811015610c4157600160096000828254610b129190612d21565b92505081905550610b298960095460018a8a61161e565b604080516001808252818301909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610b4057905050905060405180606001604052806009548152602001876001600160a01b031681526020018661ffff1681525081600081518110610bba57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250610bce81611254565b6009546000908152600a60205260409020610bea908585611fe2565b507f267de29c492da4634a7dca78204318a76a0a7c47341583b654a8a637f3f2658f6009548b8a8a8a8a604051610c2696959493929190612c9e565b60405180910390a15080610c3981612df0565b915050610af7565b505050505050505050565b336001600160a01b0383161415610cb75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016104b5565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600160096000828254610d369190612d21565b925050819055506106b98460095485858561161e565b610d6785858560405180602001604052806000815250611652565b60005b8451811015610dcf57828260086000888581518110610d9957634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000209190610dbc929190611fe2565b5080610dc781612df0565b915050610d6a565b505050505050565b6007546001600160a01b03163314610e015760405162461bcd60e51b81526004016104b590612be0565b610e18610e1336839003830183612874565b6117ba565b50565b610814858585858561161e565b6001600160a01b038516331480610e445750610e4485336103ad565b610ea25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104b5565b610814858585858561189d565b6007546001600160a01b03163314610ed95760405162461bcd60e51b81526004016104b590612be0565b6001600160a01b038116610f3e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b5565b610e18816115c2565b6007546001600160a01b03163314610f715760405162461bcd60e51b81526004016104b590612be0565b610a578383836119be565b60006001600160e01b03198216636cdb3d1360e11b1480610fad57506001600160e01b031982166303a24d0760e21b145b806104e357506104e382611ac4565b6000610fc88383611b14565b9392505050565b6001600160a01b038416610ff55760405162461bcd60e51b81526004016104b590612c5d565b3361100f8160008761100688611b4c565b61081488611b4c565b60008481526004602090815260408083206001600160a01b038916845290915281208054859290611041908490612d21565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461081481600087878787611ba5565b81518351146110c25760405162461bcd60e51b81526004016104b590612c15565b6001600160a01b0384166110e85760405162461bcd60e51b81526004016104b590612b0e565b3360005b84518110156111ee57600085828151811061111757634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061114357634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526004835260408082206001600160a01b038e1683529093529190912054909150818110156111945760405162461bcd60e51b81526004016104b590612b96565b60008381526004602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906111d3908490612d21565b92505081905550505050806111e790612df0565b90506110ec565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161123e929190612a41565b60405180910390a4610dcf818787878787611d10565b60005b8151811015610a1e57600082828151811061128257634e487b7160e01b600052603260045260246000fd5b60200260200101519050612710816040015161ffff16106112d35760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016104b5565b60208101516001600160a01b031661134c578051600090815260016020526040902080546001600160b01b0319169055805161131190600290611dda565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611414565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152600190945294909220925183549451909216600160a01b026001600160b01b031990941691161791909117905580516113ba90600290611de6565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b508061141f81612df0565b915050611257565b6001600160a01b03831661144d5760405162461bcd60e51b81526004016104b590612b53565b805182511461146e5760405162461bcd60e51b81526004016104b590612c15565b604080516020810190915260009081905233905b83518110156115635760008482815181106114ad57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008483815181106114d957634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526004835260408082206001600160a01b038c16835290935291909120549091508181101561152a5760405162461bcd60e51b81526004016104b590612aca565b60009283526004602090815260408085206001600160a01b038b168652909152909220910390558061155b81612df0565b915050611482565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516115b4929190612a41565b60405180910390a450505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006104e3825490565b61163985858560405180602001604052806000815250610fcf565b6000848152600860205260409020610dcf908383611fe2565b6001600160a01b0384166116785760405162461bcd60e51b81526004016104b590612c5d565b81518351146116995760405162461bcd60e51b81526004016104b590612c15565b3360005b8451811015611752578381815181106116c657634e487b7160e01b600052603260045260246000fd5b6020026020010151600460008784815181106116f257634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461173a9190612d21565b9091555081905061174a81612df0565b91505061169d565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117a3929190612a41565b60405180910390a461081481600087878787611d10565b612710816020015161ffff16106118015760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016104b5565b60408051808201825282516001600160a01b03168082526020808501805161ffff169190930181905260008054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419261189292916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b6001600160a01b0384166118c35760405162461bcd60e51b81526004016104b590612b0e565b336118d381878761100688611b4c565b60008481526004602090815260408083206001600160a01b038a168452909152902054838110156119165760405162461bcd60e51b81526004016104b590612b96565b60008581526004602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611955908490612d21565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46119b5828888888888611ba5565b50505050505050565b6001600160a01b0383166119e45760405162461bcd60e51b81526004016104b590612b53565b33611a14818560006119f587611b4c565b6119fe87611b4c565b5050604080516020810190915260009052505050565b60008381526004602090815260408083206001600160a01b038816845290915290205482811015611a575760405162461bcd60e51b81526004016104b590612aca565b60008481526004602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b0319821663152a902d60e11b1480611af557506001600160e01b0319821663c69dbd8f60e01b145b806104e357506301ffc9a760e01b6001600160e01b03198316146104e3565b6000826000018281548110611b3957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611b9457634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15610dcf5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611be990899089908890889088906004016129e9565b602060405180830381600087803b158015611c0357600080fd5b505af1925050508015611c33575060408051601f3d908101601f19168201909252611c30918101906127de565b60015b611ce057611c3f612e37565b806308c379a01415611c795750611c54612e4f565b80611c5f5750611c7b565b8060405162461bcd60e51b81526004016104b59190612a6f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016104b5565b6001600160e01b0319811663f23a6e6160e01b146119b55760405162461bcd60e51b81526004016104b590612a82565b6001600160a01b0384163b15610dcf5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611d54908990899088908890889060040161298b565b602060405180830381600087803b158015611d6e57600080fd5b505af1925050508015611d9e575060408051601f3d908101601f19168201909252611d9b918101906127de565b60015b611daa57611c3f612e37565b6001600160e01b0319811663bc197c8160e01b146119b55760405162461bcd60e51b81526004016104b590612a82565b6000610fc88383611df2565b6000610fc88383611f0f565b60008181526001830160205260408120548015611f05576000611e16600183612d78565b8554909150600090611e2a90600190612d78565b9050818114611eab576000866000018281548110611e5857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611e8957634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611eca57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104e3565b60009150506104e3565b6000818152600183016020526040812054611f56575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104e3565b5060006104e3565b828054611f6a90612d8f565b90600052602060002090601f016020900481019282611f8c5760008555611fd2565b82601f10611fa557805160ff1916838001178555611fd2565b82800160010185558215611fd2579182015b82811115611fd2578251825591602001919060010190611fb7565b50611fde929150612056565b5090565b828054611fee90612d8f565b90600052602060002090601f0160209004810192826120105760008555611fd2565b82601f106120295782800160ff19823516178555611fd2565b82800160010185558215611fd2579182015b82811115611fd257823582559160200191906001019061203b565b5b80821115611fde5760008155600101612057565b60006001600160401b0383111561208457612084612e21565b60405161209b601f8501601f191660200182612dc4565b8091508381528484840111156120b057600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146120df57600080fd5b919050565b600082601f8301126120f4578081fd5b8135602061210182612cfe565b60405161210e8282612dc4565b8381528281019150858301600585901b8701840188101561212d578586fd5b855b8581101561214b5781358452928401929084019060010161212f565b5090979650505050505050565b600082601f830112612168578081fd5b610fc88383356020850161206b565b60008083601f840112612188578182fd5b5081356001600160401b0381111561219e578182fd5b60208301915083602082850101111561077d57600080fd5b803561ffff811681146120df57600080fd5b6000602082840312156121d9578081fd5b610fc8826120c8565b600080604083850312156121f4578081fd5b6121fd836120c8565b915061220b602084016120c8565b90509250929050565b600080600080600060a0868803121561222b578081fd5b612234866120c8565b9450612242602087016120c8565b935060408601356001600160401b038082111561225d578283fd5b61226989838a016120e4565b9450606088013591508082111561227e578283fd5b61228a89838a016120e4565b9350608088013591508082111561229f578283fd5b506122ac88828901612158565b9150509295509295909350565b600080600080600060a086880312156122d0578081fd5b6122d9866120c8565b94506122e7602087016120c8565b9350604086013592506060860135915060808601356001600160401b0381111561230f578182fd5b6122ac88828901612158565b60008060006060848603121561232f578081fd5b612338846120c8565b925060208401356001600160401b0380821115612353578283fd5b61235f878388016120e4565b93506040860135915080821115612374578283fd5b50612381868287016120e4565b9150509250925092565b6000806000806000608086880312156123a2578283fd5b6123ab866120c8565b945060208601356001600160401b03808211156123c6578485fd5b6123d289838a016120e4565b955060408801359150808211156123e7578485fd5b6123f389838a016120e4565b94506060880135915080821115612408578283fd5b5061241588828901612177565b969995985093965092949392505050565b60008060006060848603121561243a578081fd5b612443846120c8565b925060208401356001600160401b038082111561245e578283fd5b61246a878388016120e4565b9350604086013591508082111561247f578283fd5b508401601f81018613612490578182fd5b6123818682356020840161206b565b600080604083850312156124b1578182fd5b6124ba836120c8565b9150602083013580151581146124ce578182fd5b809150509250929050565b600080604083850312156124eb578182fd5b6124f4836120c8565b946020939093013593505050565b60008060008060608587031215612517578182fd5b612520856120c8565b93506020850135925060408501356001600160401b03811115612541578283fd5b61254d87828801612177565b95989497509550505050565b60008060008060008060008060c0898b031215612574578586fd5b61257d896120c8565b97506020890135965060408901356001600160401b038082111561259f578788fd5b6125ab8c838d01612177565b90985096508691506125bf60608c016120c8565b95506125cd60808c016121b6565b945060a08b01359150808211156125e2578384fd5b506125ef8b828c01612177565b999c989b5096995094979396929594505050565b600080600060608486031215612617578081fd5b612620846120c8565b95602085013595506040909401359392505050565b60008060008060006080868803121561264c578283fd5b612655866120c8565b9450602086013593506040860135925060608601356001600160401b0381111561267d578182fd5b61241588828901612177565b6000806040838503121561269b578182fd5b82356001600160401b03808211156126b1578384fd5b818501915085601f8301126126c4578384fd5b813560206126d182612cfe565b6040516126de8282612dc4565b8381528281019150858301600585901b870184018b10156126fd578889fd5b8896505b8487101561272657612712816120c8565b835260019690960195918301918301612701565b509650508601359250508082111561273c578283fd5b50612749858286016120e4565b9150509250929050565b60008060208385031215612765578182fd5b82356001600160401b038082111561277b578384fd5b818501915085601f83011261278e578384fd5b81358181111561279c578485fd5b8660206060830285010111156127b0578485fd5b60209290920196919550909350505050565b6000602082840312156127d3578081fd5b8135610fc881612ed8565b6000602082840312156127ef578081fd5b8151610fc881612ed8565b60006060828403121561280b578081fd5b604051606081018181106001600160401b038211171561282d5761282d612e21565b60405282358152612840602084016120c8565b6020820152612851604084016121b6565b60408201529392505050565b60006040828403121561286e578081fd5b50919050565b600060408284031215612885578081fd5b604051604081018181106001600160401b03821117156128a7576128a7612e21565b6040526128b3836120c8565b81526128c1602084016121b6565b60208201529392505050565b6000602082840312156128de578081fd5b5035919050565b600080604083850312156128f7578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561293557815187529582019590820190600101612919565b509495945050505050565b60008151808452815b8181101561296557602081850181015186830182015201612949565b818111156129765782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a0604082018190526000906129b790830186612906565b82810360608401526129c98186612906565b905082810360808401526129dd8185612940565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612a2390830184612940565b979650505050505050565b602081526000610fc86020830184612906565b604081526000612a546040830185612906565b8281036020840152612a668185612906565b95945050505050565b602081526000610fc86020830184612940565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b8681526001600160a01b03868116602083015260a0604083018190528201859052600090858760c08501378160c0878501015260c0601f19601f880116840101915080851660608401525061ffff83166080830152979650505050505050565b60006001600160401b03821115612d1757612d17612e21565b5060051b60200190565b60008219821115612d3457612d34612e0b565b500190565b600082612d5457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612d7357612d73612e0b565b500290565b600082821015612d8a57612d8a612e0b565b500390565b600181811c90821680612da357607f821691505b6020821081141561286e57634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b0381118282101715612de957612de9612e21565b6040525050565b6000600019821415612e0457612e04612e0b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612e4c57600481823e5160e01c5b90565b600060443d1015612e5d5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612e8c57505050505090565b8285019150815181811115612ea45750505050505090565b843d8701016020828501011115612ebe5750505050505090565b612ecd60208286010187612dc4565b509095945050505050565b6001600160e01b031981168114610e1857600080fdfea26469706673582212205d6c76714142a775aef02672c29343eca4c8d4df650edc97e128b685d3c5a0e664736f6c63430008040033a2646970667358221220b04fda0bf31a46c98e18f3c239724ee431a6d83b0f7b67dde509d398697f6af864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80632f91b3ca1461003b578063aa18c4c614610072575b600080fd5b61004e6100493660046102c9565b61009d565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b61008561008036600461037a565b61024b565b6040516001600160a01b039091168152602001610069565b600080600089896040516100b090610275565b6100bb929190610419565b604051809103906000f0801580156100d7573d6000803e3d6000fd5b5060405163f2fde38b60e01b81523360048201529091506001600160a01b0382169063f2fde38b90602401600060405180830381600087803b15801561011c57600080fd5b505af1158015610130573d6000803e3d6000fd5b5050600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b038516908117909155604051639ca19ca560e01b81529395508593909250639ca19ca591506101b59033908c908f908f908e908e908e908e906004016103bb565b600060405180830381600087803b1580156101cf57600080fd5b505af11580156101e3573d6000803e3d6000fd5b50506040516001600160a01b03861681527f4c7afeb35ecbb8d358f788cbcf2aade0305add9fa1fee88faf6bd09e709ae36b9250602001905060405180910390a16001805490600061023483610435565b919050555060015491505097509795505050505050565b6000818154811061025b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6131c18061045d83390190565b60008083601f840112610293578182fd5b50813567ffffffffffffffff8111156102aa578182fd5b6020830191508360208285010111156102c257600080fd5b9250929050565b600080600080600080600060a0888a0312156102e3578283fd5b873567ffffffffffffffff808211156102fa578485fd5b6103068b838c01610282565b909950975060208a0135965060408a013591506001600160a01b038216821461032d578485fd5b90945060608901359061ffff82168214610345578485fd5b9093506080890135908082111561035a578384fd5b506103678a828b01610282565b989b979a50959850939692959293505050565b60006020828403121561038b578081fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060018060a01b03808b16835289602084015260c060408401526103e460c08401898b610392565b818816606085015261ffff8716608085015283810360a0850152610409818688610392565b9c9b505050505050505050505050565b60208152600061042d602083018486610392565b949350505050565b600060001982141561045557634e487b7160e01b81526011600452602481fd5b506001019056fe60806040523480156200001157600080fd5b50604051620031c1380380620031c1833981016040819052620000349162000164565b80620000408162000053565b506200004c336200006c565b506200028d565b805162000068906006906020840190620000be565b5050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000cc906200023a565b90600052602060002090601f016020900481019282620000f057600085556200013b565b82601f106200010b57805160ff19168380011785556200013b565b828001600101855582156200013b579182015b828111156200013b5782518255916020019190600101906200011e565b50620001499291506200014d565b5090565b5b808211156200014957600081556001016200014e565b6000602080838503121562000177578182fd5b82516001600160401b03808211156200018e578384fd5b818501915085601f830112620001a2578384fd5b815181811115620001b757620001b762000277565b604051601f8201601f19908116603f01168101908382118183101715620001e257620001e262000277565b816040528281528886848701011115620001fa578687fd5b8693505b828410156200021d5784840186015181850187015292850192620001fe565b828411156200022e57868684830101525b98975050505050505050565b600181811c908216806200024f57607f821691505b602082108114156200027157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612f24806200029d6000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80637885fdc7116100de578063e985e9c511610097578063f02a085711610071578063f02a085714610401578063f242432a14610414578063f2fde38b14610427578063f5298aca1461043a57600080fd5b8063e985e9c51461039f578063eb44350e146103db578063ef60ceaf146103ee57600080fd5b80637885fdc7146103015780637e980342146103435780638da5cb5b1461034b5780639ca19ca514610366578063a22cb46514610379578063d3fc98641461038c57600080fd5b80632eb2c2d61161014b5780635136dcc7116101255780635136dcc7146102ca57806361bc221a146102dd5780636b20c454146102e6578063715018a6146102f957600080fd5b80632eb2c2d61461028457806331a99766146102975780634e1273f4146102aa57600080fd5b8062fdd58e1461019257806301ffc9a7146101b85780630653aca5146101db5780630e89341c1461021d5780632a3a75fe1461023d5780632a55205a14610252575b600080fd5b6101a56101a03660046124d9565b61044d565b6040519081526020015b60405180910390f35b6101cb6101c63660046127c2565b6104e9565b60405190151581526020016101af565b6101ee6101e93660046128cd565b6104f4565b60408051825181526020808401516001600160a01b0316908201529181015161ffff16908201526060016101af565b61023061022b3660046128cd565b610579565b6040516101af9190612a6f565b61025061024b366004612426565b61061b565b005b6102656102603660046128e5565b6106bf565b604080516001600160a01b0390931683526020830191909152016101af565b610250610292366004612214565b610784565b6102306102a53660046128cd565b61081b565b6102bd6102b8366004612689565b610838565b6040516101af9190612a2e565b6102506102d8366004612753565b610999565b6101a560095481565b6102506102f436600461231b565b610a22565b610250610a5c565b600054610321906001600160a01b03811690600160a01b900461ffff1682565b604080516001600160a01b03909316835261ffff9091166020830152016101af565b6101a5610a92565b6007546040516001600160a01b0390911681526020016101af565b610250610374366004612559565b610aa3565b61025061038736600461249f565b610c4c565b61025061039a366004612502565b610d23565b6101cb6103ad3660046121e2565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102506103e936600461238b565b610d4c565b6102506103fc36600461285d565b610dd7565b61025061040f366004612635565b610e1b565b6102506104223660046122b9565b610e28565b6102506104353660046121c8565b610eaf565b610250610448366004612603565b610f47565b60006001600160a01b0383166104be5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526004602090815260408083206001600160a01b03861684529091529020545b92915050565b60006104e382610f7c565b604080516060810182526000808252602082018190529181018290529061051c600284610fbc565b6000818152600160209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b600081815260086020526040902080546060919061059690612d8f565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290612d8f565b801561060f5780601f106105e45761010080835404028352916020019161060f565b820191906000526020600020905b8154815290600101906020018083116105f257829003601f168201915b50505050509050919050565b60016009600082825461062e9190612d21565b90915550600090505b82518110156106b9576106848460095485848151811061066757634e487b7160e01b600052603260045260246000fd5b602002602001015160405180602001604052806000815250610fcf565b600954600090815260086020908152604090912083516106a692850190611f5e565b50806106b181612df0565b915050610637565b50505050565b60008281526001602052604081205481906001600160a01b031615610724576000848152600160205260409020546001600160a01b038116906127109061071190600160a01b900461ffff1686612d59565b61071b9190612d39565b9150915061077d565b6000546001600160a01b03161580159061074a5750600054600160a01b900461ffff1615155b15610776576000546001600160a01b038116906127109061071190600160a01b900461ffff1686612d59565b5060009050805b9250929050565b6001600160a01b0385163314806107a057506107a085336103ad565b6108075760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016104b5565b61081485858585856110a1565b5050505050565b6000818152600a6020526040902080546060919061059690612d8f565b6060815183511461089d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016104b5565b600083516001600160401b038111156108c657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108ef578160200160208202803683370190505b50905060005b84518110156109915761095685828151811061092157634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061094957634e487b7160e01b600052603260045260246000fd5b602002602001015161044d565b82828151811061097657634e487b7160e01b600052603260045260246000fd5b602090810291909101015261098a81612df0565b90506108f5565b509392505050565b6007546001600160a01b031633146109c35760405162461bcd60e51b81526004016104b590612be0565b610a1e8282808060200260200160405190810160405280939291908181526020016000905b82821015610a1457610a05606083028601368190038101906127fa565b815260200190600101906109e8565b5050505050611254565b5050565b6007546001600160a01b03163314610a4c5760405162461bcd60e51b81526004016104b590612be0565b610a57838383611427565b505050565b6007546001600160a01b03163314610a865760405162461bcd60e51b81526004016104b590612be0565b610a9060006115c2565b565b6000610a9e6002611614565b905090565b6064871115610af45760405162461bcd60e51b815260206004820181905260248201527f416d6f756e742063616e27742062652067726561746572207468616e2031302160448201526064016104b5565b60005b87811015610c4157600160096000828254610b129190612d21565b92505081905550610b298960095460018a8a61161e565b604080516001808252818301909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610b4057905050905060405180606001604052806009548152602001876001600160a01b031681526020018661ffff1681525081600081518110610bba57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250610bce81611254565b6009546000908152600a60205260409020610bea908585611fe2565b507f267de29c492da4634a7dca78204318a76a0a7c47341583b654a8a637f3f2658f6009548b8a8a8a8a604051610c2696959493929190612c9e565b60405180910390a15080610c3981612df0565b915050610af7565b505050505050505050565b336001600160a01b0383161415610cb75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016104b5565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600160096000828254610d369190612d21565b925050819055506106b98460095485858561161e565b610d6785858560405180602001604052806000815250611652565b60005b8451811015610dcf57828260086000888581518110610d9957634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000209190610dbc929190611fe2565b5080610dc781612df0565b915050610d6a565b505050505050565b6007546001600160a01b03163314610e015760405162461bcd60e51b81526004016104b590612be0565b610e18610e1336839003830183612874565b6117ba565b50565b610814858585858561161e565b6001600160a01b038516331480610e445750610e4485336103ad565b610ea25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104b5565b610814858585858561189d565b6007546001600160a01b03163314610ed95760405162461bcd60e51b81526004016104b590612be0565b6001600160a01b038116610f3e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b5565b610e18816115c2565b6007546001600160a01b03163314610f715760405162461bcd60e51b81526004016104b590612be0565b610a578383836119be565b60006001600160e01b03198216636cdb3d1360e11b1480610fad57506001600160e01b031982166303a24d0760e21b145b806104e357506104e382611ac4565b6000610fc88383611b14565b9392505050565b6001600160a01b038416610ff55760405162461bcd60e51b81526004016104b590612c5d565b3361100f8160008761100688611b4c565b61081488611b4c565b60008481526004602090815260408083206001600160a01b038916845290915281208054859290611041908490612d21565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461081481600087878787611ba5565b81518351146110c25760405162461bcd60e51b81526004016104b590612c15565b6001600160a01b0384166110e85760405162461bcd60e51b81526004016104b590612b0e565b3360005b84518110156111ee57600085828151811061111757634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061114357634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526004835260408082206001600160a01b038e1683529093529190912054909150818110156111945760405162461bcd60e51b81526004016104b590612b96565b60008381526004602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906111d3908490612d21565b92505081905550505050806111e790612df0565b90506110ec565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161123e929190612a41565b60405180910390a4610dcf818787878787611d10565b60005b8151811015610a1e57600082828151811061128257634e487b7160e01b600052603260045260246000fd5b60200260200101519050612710816040015161ffff16106112d35760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016104b5565b60208101516001600160a01b031661134c578051600090815260016020526040902080546001600160b01b0319169055805161131190600290611dda565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611414565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152600190945294909220925183549451909216600160a01b026001600160b01b031990941691161791909117905580516113ba90600290611de6565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b508061141f81612df0565b915050611257565b6001600160a01b03831661144d5760405162461bcd60e51b81526004016104b590612b53565b805182511461146e5760405162461bcd60e51b81526004016104b590612c15565b604080516020810190915260009081905233905b83518110156115635760008482815181106114ad57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008483815181106114d957634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526004835260408082206001600160a01b038c16835290935291909120549091508181101561152a5760405162461bcd60e51b81526004016104b590612aca565b60009283526004602090815260408085206001600160a01b038b168652909152909220910390558061155b81612df0565b915050611482565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516115b4929190612a41565b60405180910390a450505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006104e3825490565b61163985858560405180602001604052806000815250610fcf565b6000848152600860205260409020610dcf908383611fe2565b6001600160a01b0384166116785760405162461bcd60e51b81526004016104b590612c5d565b81518351146116995760405162461bcd60e51b81526004016104b590612c15565b3360005b8451811015611752578381815181106116c657634e487b7160e01b600052603260045260246000fd5b6020026020010151600460008784815181106116f257634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461173a9190612d21565b9091555081905061174a81612df0565b91505061169d565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117a3929190612a41565b60405180910390a461081481600087878787611d10565b612710816020015161ffff16106118015760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016104b5565b60408051808201825282516001600160a01b03168082526020808501805161ffff169190930181905260008054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419261189292916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b6001600160a01b0384166118c35760405162461bcd60e51b81526004016104b590612b0e565b336118d381878761100688611b4c565b60008481526004602090815260408083206001600160a01b038a168452909152902054838110156119165760405162461bcd60e51b81526004016104b590612b96565b60008581526004602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611955908490612d21565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46119b5828888888888611ba5565b50505050505050565b6001600160a01b0383166119e45760405162461bcd60e51b81526004016104b590612b53565b33611a14818560006119f587611b4c565b6119fe87611b4c565b5050604080516020810190915260009052505050565b60008381526004602090815260408083206001600160a01b038816845290915290205482811015611a575760405162461bcd60e51b81526004016104b590612aca565b60008481526004602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b0319821663152a902d60e11b1480611af557506001600160e01b0319821663c69dbd8f60e01b145b806104e357506301ffc9a760e01b6001600160e01b03198316146104e3565b6000826000018281548110611b3957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611b9457634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15610dcf5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611be990899089908890889088906004016129e9565b602060405180830381600087803b158015611c0357600080fd5b505af1925050508015611c33575060408051601f3d908101601f19168201909252611c30918101906127de565b60015b611ce057611c3f612e37565b806308c379a01415611c795750611c54612e4f565b80611c5f5750611c7b565b8060405162461bcd60e51b81526004016104b59190612a6f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016104b5565b6001600160e01b0319811663f23a6e6160e01b146119b55760405162461bcd60e51b81526004016104b590612a82565b6001600160a01b0384163b15610dcf5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611d54908990899088908890889060040161298b565b602060405180830381600087803b158015611d6e57600080fd5b505af1925050508015611d9e575060408051601f3d908101601f19168201909252611d9b918101906127de565b60015b611daa57611c3f612e37565b6001600160e01b0319811663bc197c8160e01b146119b55760405162461bcd60e51b81526004016104b590612a82565b6000610fc88383611df2565b6000610fc88383611f0f565b60008181526001830160205260408120548015611f05576000611e16600183612d78565b8554909150600090611e2a90600190612d78565b9050818114611eab576000866000018281548110611e5857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611e8957634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611eca57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104e3565b60009150506104e3565b6000818152600183016020526040812054611f56575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104e3565b5060006104e3565b828054611f6a90612d8f565b90600052602060002090601f016020900481019282611f8c5760008555611fd2565b82601f10611fa557805160ff1916838001178555611fd2565b82800160010185558215611fd2579182015b82811115611fd2578251825591602001919060010190611fb7565b50611fde929150612056565b5090565b828054611fee90612d8f565b90600052602060002090601f0160209004810192826120105760008555611fd2565b82601f106120295782800160ff19823516178555611fd2565b82800160010185558215611fd2579182015b82811115611fd257823582559160200191906001019061203b565b5b80821115611fde5760008155600101612057565b60006001600160401b0383111561208457612084612e21565b60405161209b601f8501601f191660200182612dc4565b8091508381528484840111156120b057600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146120df57600080fd5b919050565b600082601f8301126120f4578081fd5b8135602061210182612cfe565b60405161210e8282612dc4565b8381528281019150858301600585901b8701840188101561212d578586fd5b855b8581101561214b5781358452928401929084019060010161212f565b5090979650505050505050565b600082601f830112612168578081fd5b610fc88383356020850161206b565b60008083601f840112612188578182fd5b5081356001600160401b0381111561219e578182fd5b60208301915083602082850101111561077d57600080fd5b803561ffff811681146120df57600080fd5b6000602082840312156121d9578081fd5b610fc8826120c8565b600080604083850312156121f4578081fd5b6121fd836120c8565b915061220b602084016120c8565b90509250929050565b600080600080600060a0868803121561222b578081fd5b612234866120c8565b9450612242602087016120c8565b935060408601356001600160401b038082111561225d578283fd5b61226989838a016120e4565b9450606088013591508082111561227e578283fd5b61228a89838a016120e4565b9350608088013591508082111561229f578283fd5b506122ac88828901612158565b9150509295509295909350565b600080600080600060a086880312156122d0578081fd5b6122d9866120c8565b94506122e7602087016120c8565b9350604086013592506060860135915060808601356001600160401b0381111561230f578182fd5b6122ac88828901612158565b60008060006060848603121561232f578081fd5b612338846120c8565b925060208401356001600160401b0380821115612353578283fd5b61235f878388016120e4565b93506040860135915080821115612374578283fd5b50612381868287016120e4565b9150509250925092565b6000806000806000608086880312156123a2578283fd5b6123ab866120c8565b945060208601356001600160401b03808211156123c6578485fd5b6123d289838a016120e4565b955060408801359150808211156123e7578485fd5b6123f389838a016120e4565b94506060880135915080821115612408578283fd5b5061241588828901612177565b969995985093965092949392505050565b60008060006060848603121561243a578081fd5b612443846120c8565b925060208401356001600160401b038082111561245e578283fd5b61246a878388016120e4565b9350604086013591508082111561247f578283fd5b508401601f81018613612490578182fd5b6123818682356020840161206b565b600080604083850312156124b1578182fd5b6124ba836120c8565b9150602083013580151581146124ce578182fd5b809150509250929050565b600080604083850312156124eb578182fd5b6124f4836120c8565b946020939093013593505050565b60008060008060608587031215612517578182fd5b612520856120c8565b93506020850135925060408501356001600160401b03811115612541578283fd5b61254d87828801612177565b95989497509550505050565b60008060008060008060008060c0898b031215612574578586fd5b61257d896120c8565b97506020890135965060408901356001600160401b038082111561259f578788fd5b6125ab8c838d01612177565b90985096508691506125bf60608c016120c8565b95506125cd60808c016121b6565b945060a08b01359150808211156125e2578384fd5b506125ef8b828c01612177565b999c989b5096995094979396929594505050565b600080600060608486031215612617578081fd5b612620846120c8565b95602085013595506040909401359392505050565b60008060008060006080868803121561264c578283fd5b612655866120c8565b9450602086013593506040860135925060608601356001600160401b0381111561267d578182fd5b61241588828901612177565b6000806040838503121561269b578182fd5b82356001600160401b03808211156126b1578384fd5b818501915085601f8301126126c4578384fd5b813560206126d182612cfe565b6040516126de8282612dc4565b8381528281019150858301600585901b870184018b10156126fd578889fd5b8896505b8487101561272657612712816120c8565b835260019690960195918301918301612701565b509650508601359250508082111561273c578283fd5b50612749858286016120e4565b9150509250929050565b60008060208385031215612765578182fd5b82356001600160401b038082111561277b578384fd5b818501915085601f83011261278e578384fd5b81358181111561279c578485fd5b8660206060830285010111156127b0578485fd5b60209290920196919550909350505050565b6000602082840312156127d3578081fd5b8135610fc881612ed8565b6000602082840312156127ef578081fd5b8151610fc881612ed8565b60006060828403121561280b578081fd5b604051606081018181106001600160401b038211171561282d5761282d612e21565b60405282358152612840602084016120c8565b6020820152612851604084016121b6565b60408201529392505050565b60006040828403121561286e578081fd5b50919050565b600060408284031215612885578081fd5b604051604081018181106001600160401b03821117156128a7576128a7612e21565b6040526128b3836120c8565b81526128c1602084016121b6565b60208201529392505050565b6000602082840312156128de578081fd5b5035919050565b600080604083850312156128f7578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561293557815187529582019590820190600101612919565b509495945050505050565b60008151808452815b8181101561296557602081850181015186830182015201612949565b818111156129765782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a0604082018190526000906129b790830186612906565b82810360608401526129c98186612906565b905082810360808401526129dd8185612940565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612a2390830184612940565b979650505050505050565b602081526000610fc86020830184612906565b604081526000612a546040830185612906565b8281036020840152612a668185612906565b95945050505050565b602081526000610fc86020830184612940565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b8681526001600160a01b03868116602083015260a0604083018190528201859052600090858760c08501378160c0878501015260c0601f19601f880116840101915080851660608401525061ffff83166080830152979650505050505050565b60006001600160401b03821115612d1757612d17612e21565b5060051b60200190565b60008219821115612d3457612d34612e0b565b500190565b600082612d5457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612d7357612d73612e0b565b500290565b600082821015612d8a57612d8a612e0b565b500390565b600181811c90821680612da357607f821691505b6020821081141561286e57634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b0381118282101715612de957612de9612e21565b6040525050565b6000600019821415612e0457612e04612e0b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612e4c57600481823e5160e01c5b90565b600060443d1015612e5d5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612e8c57505050505090565b8285019150815181811115612ea45750505050505090565b843d8701016020828501011115612ebe5750505050505090565b612ecd60208286010187612dc4565b509095945050505050565b6001600160e01b031981168114610e1857600080fdfea26469706673582212205d6c76714142a775aef02672c29343eca4c8d4df650edc97e128b685d3c5a0e664736f6c63430008040033a2646970667358221220b04fda0bf31a46c98e18f3c239724ee431a6d83b0f7b67dde509d398697f6af864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3180,
        "contract": "contracts/RoyaltyFactory.sol:RoyaltyFactory",
        "label": "allRoyalties",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3182,
        "contract": "contracts/RoyaltyFactory.sol:RoyaltyFactory",
        "label": "royaltyCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
