{
  "address": "0xf5391d920D03428e158Ca5393CDfdd7BAB66De73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "RoyaltyNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRoyaltyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "TokenRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultRoyalty",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenRoyaltiesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTokenRoyaltyByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IERC1155WithRoyalty.TokenRoyaltyConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "URIs",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "royaltyAddress",
          "type": "address[]"
        },
        {
          "internalType": "uint16[]",
          "name": "bps",
          "type": "uint16[]"
        },
        {
          "internalType": "string[]",
          "name": "proofOfAuthenticity_",
          "type": "string[]"
        }
      ],
      "name": "mintBatchWithRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "mintBatchWithoutId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "mintWithId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "proofOfAuthenticity_",
          "type": "string"
        }
      ],
      "name": "mintWithRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "proofOfAuthenticity",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IERC1155WithRoyalty.TokenRoyalty",
          "name": "royalty",
          "type": "tuple"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IERC1155WithRoyalty.TokenRoyaltyConfig[]",
          "name": "royaltyConfigs",
          "type": "tuple[]"
        }
      ],
      "name": "setTokenRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5eb3184527d9df68a7e9736a6a181ddf3f520b0850f2f48bb4114fcf2ebfea80",
  "receipt": {
    "to": null,
    "from": "0x283DdEa5589aba63221653D9ED02aaa7D60a389B",
    "contractAddress": "0xf5391d920D03428e158Ca5393CDfdd7BAB66De73",
    "transactionIndex": 1,
    "gasUsed": "2917482",
    "logsBloom": "0x
    "blockHash": "0x090e46b5e2ed43e29a22c4070f232c84241abb367f22879f1a2a5ca5434ded06",
    "transactionHash": "0x5eb3184527d9df68a7e9736a6a181ddf3f520b0850f2f48bb4114fcf2ebfea80",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 22745406,
        "transactionHash": "0x5eb3184527d9df68a7e9736a6a181ddf3f520b0850f2f48bb4114fcf2ebfea80",
        "address": "0xf5391d920D03428e158Ca5393CDfdd7BAB66De73",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000283ddea5589aba63221653d9ed02aaa7d60a389b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x090e46b5e2ed43e29a22c4070f232c84241abb367f22879f1a2a5ca5434ded06"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 22745406,
        "transactionHash": "0x5eb3184527d9df68a7e9736a6a181ddf3f520b0850f2f48bb4114fcf2ebfea80",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000283ddea5589aba63221653d9ed02aaa7d60a389b",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001560b55fcfc851a000000000000000000000000000000000000000000000000091c1aa51df8e091000000000000000000000000000000000000000000000347c340fe0d991aaede00000000000000000000000000000000000000000000000007c60f4f20fc5b77000000000000000000000000000000000000000000000347c4970963961733f8",
        "logIndex": 3,
        "blockHash": "0x090e46b5e2ed43e29a22c4070f232c84241abb367f22879f1a2a5ca5434ded06"
      }
    ],
    "blockNumber": 22745406,
    "cumulativeGasUsed": "2951759",
    "status": 1,
    "byzantium": true
  },
  "args": [""],
  "solcInputHash": "3c7d3edb4125a86678eb525f0896b899",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"RoyaltyNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRoyaltyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenRoyaltiesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyaltyByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IERC1155WithRoyalty.TokenRoyaltyConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"URIs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"royaltyAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"bps\",\"type\":\"uint16[]\"},{\"internalType\":\"string[]\",\"name\":\"proofOfAuthenticity_\",\"type\":\"string[]\"}],\"name\":\"mintBatchWithRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"mintBatchWithoutId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintWithId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"proofOfAuthenticity_\",\"type\":\"string\"}],\"name\":\"mintWithRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"proofOfAuthenticity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IERC1155WithRoyalty.TokenRoyalty\",\"name\":\"royalty\",\"type\":\"tuple\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IERC1155WithRoyalty.TokenRoyaltyConfig[]\",\"name\":\"royaltyConfigs\",\"type\":\"tuple[]\"}],\"name\":\"setTokenRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getTokenRoyaltiesCount()\":{\"details\":\"See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\"},\"getTokenRoyaltyByIndex(uint256)\":{\"details\":\"See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"See {IEIP2981RoyaltyOverride-royaltyInfo}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setDefaultRoyalty((address,uint16))\":{\"details\":\"Set a default royalty configuration.  Will be used if no token specific configuration is set\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC1155WithRoyalty.sol\":\"ERC1155WithRoyalty\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x390521fa8ac0210850198bca62e009907bdc81cb74e618d052c4ac1afc89a2a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/ERC1155WithRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"./ERC1155WithRoyaltyCore.sol\\\";\\r\\n\\r\\ncontract ERC1155WithRoyalty is ERC1155WithRoyaltyCore, ERC1155, Ownable {\\r\\n    mapping(uint256 => string) private tokenToUri;\\r\\n\\r\\n    uint256 public counter;\\r\\n\\r\\n    mapping(uint256 => string) private _proofOfAuthenticity;\\r\\n\\r\\n    event RoyaltyNFT(\\r\\n        uint256 id,\\r\\n        address owner,\\r\\n        string uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps\\r\\n    );\\r\\n\\r\\n    constructor(string memory uri_)\\r\\n        ERC1155(uri_)\\r\\n    {}\\r\\n\\r\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royaltyConfigs)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setTokenRoyalties(royaltyConfigs);\\r\\n    }\\r\\n\\r\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setDefaultRoyalty(royalty);\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        string calldata uri\\r\\n    ) public {\\r\\n        counter += 1;\\r\\n        _mint(to, counter, amount, uri);\\r\\n    }\\r\\n\\r\\n    function mintWithId(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount,\\r\\n        string calldata uri\\r\\n    ) public {\\r\\n        _mint(to, tokenId, amount, uri);\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 amount\\r\\n    ) public onlyOwner {\\r\\n        _burn(from, id, amount);\\r\\n    }\\r\\n\\r\\n    function burnBatch(\\r\\n        address from,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts\\r\\n    ) public onlyOwner {\\r\\n        _burnBatch(from, ids, amounts);\\r\\n    }\\r\\n\\r\\n    function mintBatch(\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        string calldata data\\r\\n    ) public {\\r\\n        _mintBatch(to, ids, amounts, '');\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            tokenToUri[ids[i]] = data;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintBatchWithoutId(\\r\\n        address to,\\r\\n        uint256[] memory amounts,\\r\\n        string memory data\\r\\n    ) public {\\r\\n        counter += 1;\\r\\n        for (uint256 i = 0; i < amounts.length; i++) {\\r\\n            _mint(to, counter, amounts[i], '');\\r\\n            tokenToUri[counter] = data;\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintBatchWithRoyalty(\\r\\n        address to,\\r\\n        uint256[] memory amounts,\\r\\n        string[] calldata URIs,\\r\\n        address[] memory royaltyAddress,\\r\\n        uint16[] memory bps,\\r\\n        string[] calldata proofOfAuthenticity_\\r\\n    ) public {\\r\\n        require(amounts.length == URIs.length, \\\"amounts and uri length mismatch\\\");\\r\\n        require(amounts.length == royaltyAddress.length, \\\"amounts and royaltyAddress length mismatch\\\");\\r\\n        require(amounts.length == bps.length, \\\"amounts and amounts bps mismatch\\\");\\r\\n        require(amounts.length == proofOfAuthenticity_.length, \\\"amounts and proofOfAuthenticity_ length mismatch\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < amounts.length; i++) {\\r\\n\\r\\n            //string calldata uri = URIs[i];\\r\\n\\r\\n            mintWithRoyalty(\\r\\n                to,\\r\\n                amounts[i],\\r\\n                URIs[i],\\r\\n                royaltyAddress[i],\\r\\n                bps[i],\\r\\n                proofOfAuthenticity_[i]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function proofOfAuthenticity(uint256 id) public view returns (string memory) {\\r\\n        return _proofOfAuthenticity[id];\\r\\n    }\\r\\n\\r\\n    function mintWithRoyalty(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        string calldata uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps,\\r\\n        string calldata proofOfAuthenticity_\\r\\n    ) public {\\r\\n        counter += 1;\\r\\n        _mint(to, counter, amount, uri);\\r\\n\\r\\n        TokenRoyaltyConfig[] memory config = new TokenRoyaltyConfig[](1);\\r\\n        config[0] = TokenRoyaltyConfig(counter, royaltyAddress, bps);\\r\\n        _setTokenRoyalties(config);\\r\\n\\r\\n        _proofOfAuthenticity[counter] = proofOfAuthenticity_;\\r\\n\\r\\n        emit RoyaltyNFT(counter, to, uri, royaltyAddress, bps);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC1155, ERC1155WithRoyaltyCore)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _mint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount,\\r\\n        string calldata uri\\r\\n    ) private {\\r\\n        super._mint(to, tokenId, amount, '');\\r\\n        tokenToUri[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\r\\n        return tokenToUri[tokenId];\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x3acf9c98d614edab44a3187019ff06c1c67eae075f673c1e90f1e94da509d34e\",\"license\":\"MIT\"},\"contracts/ERC1155WithRoyaltyCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport \\\"./IERC1155WithRoyalty.sol\\\";\\r\\n\\r\\nabstract contract ERC1155WithRoyaltyCore is\\r\\n    IERC2981,\\r\\n    IERC1155WithRoyalty,\\r\\n    ERC165\\r\\n{\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    TokenRoyalty public defaultRoyalty;\\r\\n    mapping(uint256 => TokenRoyalty) private _tokenRoyalties;\\r\\n    EnumerableSet.UintSet private _tokensWithRoyalties;\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC165, IERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC2981).interfaceId ||\\r\\n            interfaceId == type(IERC1155WithRoyalty).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets token royalties. When you override this in the implementation contract\\r\\n     * ensure that you access restrict it to the contract owner or admin\\r\\n     */\\r\\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs)\\r\\n        internal\\r\\n    {\\r\\n        for (uint256 i = 0; i < royaltyConfigs.length; i++) {\\r\\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\\r\\n            require(royaltyConfig.bps < 10000, \\\"Invalid bps\\\");\\r\\n            if (royaltyConfig.recipient == address(0)) {\\r\\n                delete _tokenRoyalties[royaltyConfig.tokenId];\\r\\n                _tokensWithRoyalties.remove(royaltyConfig.tokenId);\\r\\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\\r\\n            } else {\\r\\n                _tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(\\r\\n                    royaltyConfig.recipient,\\r\\n                    royaltyConfig.bps\\r\\n                );\\r\\n                _tokensWithRoyalties.add(royaltyConfig.tokenId);\\r\\n                emit TokenRoyaltySet(\\r\\n                    royaltyConfig.tokenId,\\r\\n                    royaltyConfig.recipient,\\r\\n                    royaltyConfig.bps\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets default royalty. When you override this in the implementation contract\\r\\n     * ensure that you access restrict it to the contract owner or admin\\r\\n     */\\r\\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal {\\r\\n        require(royalty.bps < 10000, \\\"Invalid bps\\\");\\r\\n        defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\\r\\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\\r\\n     */\\r\\n    function getTokenRoyaltiesCount() external view override returns (uint256) {\\r\\n        return _tokensWithRoyalties.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\\r\\n     */\\r\\n    function getTokenRoyaltyByIndex(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (TokenRoyaltyConfig memory)\\r\\n    {\\r\\n        uint256 tokenId = _tokensWithRoyalties.at(index);\\r\\n        TokenRoyalty memory royalty = _tokenRoyalties[tokenId];\\r\\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\\r\\n     */\\r\\n    function royaltyInfo(uint256 tokenId, uint256 value)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address, uint256)\\r\\n    {\\r\\n        if (_tokenRoyalties[tokenId].recipient != address(0)) {\\r\\n            return (\\r\\n                _tokenRoyalties[tokenId].recipient,\\r\\n                (value * _tokenRoyalties[tokenId].bps) / 10000\\r\\n            );\\r\\n        }\\r\\n        if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\\r\\n            return (\\r\\n                defaultRoyalty.recipient,\\r\\n                (value * defaultRoyalty.bps) / 10000\\r\\n            );\\r\\n        }\\r\\n        return (address(0), 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb27db2d36a70fdc09d38cc7626422accc6ca077192a3512e4974ec904e071a41\",\"license\":\"MIT\"},\"contracts/IERC1155WithRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC1155WithRoyalty is IERC165 {\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties)\\n        external;\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index)\\n        external\\n        view\\n        returns (TokenRoyaltyConfig memory);\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\\n}\\n\",\"keccak256\":\"0xc3ff9a674d8ae1a9dc2d649a34c18d6e6ced36a2053dca049bbb434667b3ec9e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620035c1380380620035c1833981016040819052620000349162000164565b80620000408162000053565b506200004c336200006c565b506200028d565b805162000068906006906020840190620000be565b5050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000cc906200023a565b90600052602060002090601f016020900481019282620000f057600085556200013b565b82601f106200010b57805160ff19168380011785556200013b565b828001600101855582156200013b579182015b828111156200013b5782518255916020019190600101906200011e565b50620001499291506200014d565b5090565b5b808211156200014957600081556001016200014e565b6000602080838503121562000177578182fd5b82516001600160401b03808211156200018e578384fd5b818501915085601f830112620001a2578384fd5b815181811115620001b757620001b762000277565b604051601f8201601f19908116603f01168101908382118183101715620001e257620001e262000277565b816040528281528886848701011115620001fa578687fd5b8693505b828410156200021d5784840186015181850187015292850192620001fe565b828411156200022e57868684830101525b98975050505050505050565b600181811c908216806200024f57607f821691505b602082108114156200027157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b613324806200029d6000396000f3fe608060405234801561001057600080fd5b50600436106101a85760003560e01c80637885fdc7116100f9578063e985e9c511610097578063f02a085711610071578063f02a08571461042f578063f242432a14610442578063f2fde38b14610455578063f5298aca1461046857600080fd5b8063e985e9c5146103cd578063eb44350e14610409578063ef60ceaf1461041c57600080fd5b80639ca19ca5116100d35780639ca19ca514610381578063a22cb46514610394578063b5280188146103a7578063d3fc9864146103ba57600080fd5b80637885fdc71461031c5780637e9803421461035e5780638da5cb5b1461036657600080fd5b80632eb2c2d6116101665780635136dcc7116101405780635136dcc7146102e557806361bc221a146102f85780636b20c45414610301578063715018a61461031457600080fd5b80632eb2c2d61461029f57806331a99766146102b25780634e1273f4146102c557600080fd5b8062fdd58e146101ad57806301ffc9a7146101d35780630653aca5146101f65780630e89341c146102385780632a3a75fe146102585780632a55205a1461026d575b600080fd5b6101c06101bb366004612913565b61047b565b6040519081526020015b60405180910390f35b6101e66101e1366004612b7e565b610517565b60405190151581526020016101ca565b610209610204366004612c89565b610522565b60408051825181526020808401516001600160a01b0316908201529181015161ffff16908201526060016101ca565b61024b610246366004612c89565b6105a7565b6040516101ca9190612e2b565b61026b610266366004612860565b610649565b005b61028061027b366004612ca1565b6106ed565b604080516001600160a01b0390931683526020830191909152016101ca565b61026b6102ad366004612567565b6107b2565b61024b6102c0366004612c89565b610849565b6102d86102d3366004612aaf565b610866565b6040516101ca9190612dea565b61026b6102f3366004612b0f565b6109c7565b6101c060095481565b61026b61030f366004612755565b610a50565b61026b610a8a565b60005461033c906001600160a01b03811690600160a01b900461ffff1682565b604080516001600160a01b03909316835261ffff9091166020830152016101ca565b6101c0610ac0565b6007546040516001600160a01b0390911681526020016101ca565b61026b61038f366004612993565b610ad1565b61026b6103a23660046128d9565b610c0a565b61026b6103b536600461266e565b610ce1565b61026b6103c836600461293c565b610f58565b6101e66103db366004612535565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61026b6104173660046127c5565b610f81565b61026b61042a366004612c19565b61100c565b61026b61043d366004612a5b565b611050565b61026b61045036600461260c565b61105d565b61026b61046336600461251b565b6110e4565b61026b610476366004612a29565b61117c565b60006001600160a01b0383166104ec5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526004602090815260408083206001600160a01b03861684529091529020545b92915050565b6000610511826111b1565b604080516060810182526000808252602082018190529181018290529061054a6002846111f1565b6000818152600160209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b60008181526008602052604090208054606091906105c49061318f565b80601f01602080910402602001604051908101604052809291908181526020018280546105f09061318f565b801561063d5780601f106106125761010080835404028352916020019161063d565b820191906000526020600020905b81548152906001019060200180831161062057829003601f168201915b50505050509050919050565b60016009600082825461065c9190613121565b90915550600090505b82518110156106e7576106b28460095485848151811061069557634e487b7160e01b600052603260045260246000fd5b602002602001015160405180602001604052806000815250611204565b600954600090815260086020908152604090912083516106d492850190612193565b50806106df816131f0565b915050610665565b50505050565b60008281526001602052604081205481906001600160a01b031615610752576000848152600160205260409020546001600160a01b038116906127109061073f90600160a01b900461ffff1686613159565b6107499190613139565b915091506107ab565b6000546001600160a01b0316158015906107785750600054600160a01b900461ffff1615155b156107a4576000546001600160a01b038116906127109061073f90600160a01b900461ffff1686613159565b5060009050805b9250929050565b6001600160a01b0385163314806107ce57506107ce85336103db565b6108355760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016104e3565b61084285858585856112d6565b5050505050565b6000818152600a602052604090208054606091906105c49061318f565b606081518351146108cb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016104e3565b600083516001600160401b038111156108f457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561091d578160200160208202803683370190505b50905060005b84518110156109bf5761098485828151811061094f57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061097757634e487b7160e01b600052603260045260246000fd5b602002602001015161047b565b8282815181106109a457634e487b7160e01b600052603260045260246000fd5b60209081029190910101526109b8816131f0565b9050610923565b509392505050565b6007546001600160a01b031633146109f15760405162461bcd60e51b81526004016104e390612f9c565b610a4c8282808060200260200160405190810160405280939291908181526020016000905b82821015610a4257610a3360608302860136819003810190612bb6565b81526020019060010190610a16565b5050505050611489565b5050565b6007546001600160a01b03163314610a7a5760405162461bcd60e51b81526004016104e390612f9c565b610a8583838361165c565b505050565b6007546001600160a01b03163314610ab45760405162461bcd60e51b81526004016104e390612f9c565b610abe60006117f7565b565b6000610acc6002611849565b905090565b600160096000828254610ae49190613121565b92505081905550610afa88600954898989611853565b604080516001808252818301909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610b1157905050905060405180606001604052806009548152602001866001600160a01b031681526020018561ffff1681525081600081518110610b8b57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250610b9f81611489565b6009546000908152600a60205260409020610bbb908484612217565b507f267de29c492da4634a7dca78204318a76a0a7c47341583b654a8a637f3f2658f6009548a89898989604051610bf79695949392919061305a565b60405180910390a1505050505050505050565b336001600160a01b0383161415610c755760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016104e3565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b86518514610d315760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e747320616e6420757269206c656e677468206d69736d617463680060448201526064016104e3565b8351875114610d955760405162461bcd60e51b815260206004820152602a60248201527f616d6f756e747320616e6420726f79616c747941646472657373206c656e67746044820152690d040dad2e6dac2e8c6d60b31b60648201526084016104e3565b8251875114610de65760405162461bcd60e51b815260206004820181905260248201527f616d6f756e747320616e6420616d6f756e747320627073206d69736d6174636860448201526064016104e3565b86518114610e4f5760405162461bcd60e51b815260206004820152603060248201527f616d6f756e747320616e642070726f6f664f6641757468656e7469636974795f60448201526f040d8cadccee8d040dad2e6dac2e8c6d60831b60648201526084016104e3565b60005b8751811015610f4d57610f3b89898381518110610e7f57634e487b7160e01b600052603260045260246000fd5b6020026020010151898985818110610ea757634e487b7160e01b600052603260045260246000fd5b9050602002810190610eb991906130ba565b898681518110610ed957634e487b7160e01b600052603260045260246000fd5b6020026020010151898781518110610f0157634e487b7160e01b600052603260045260246000fd5b6020026020010151898989818110610f2957634e487b7160e01b600052603260045260246000fd5b905060200281019061038f91906130ba565b80610f45816131f0565b915050610e52565b505050505050505050565b600160096000828254610f6b9190613121565b925050819055506106e784600954858585611853565b610f9c85858560405180602001604052806000815250611887565b60005b845181101561100457828260086000888581518110610fce57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000209190610ff1929190612217565b5080610ffc816131f0565b915050610f9f565b505050505050565b6007546001600160a01b031633146110365760405162461bcd60e51b81526004016104e390612f9c565b61104d61104836839003830183612c30565b6119ef565b50565b6108428585858585611853565b6001600160a01b038516331480611079575061107985336103db565b6110d75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104e3565b6108428585858585611ad2565b6007546001600160a01b0316331461110e5760405162461bcd60e51b81526004016104e390612f9c565b6001600160a01b0381166111735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104e3565b61104d816117f7565b6007546001600160a01b031633146111a65760405162461bcd60e51b81526004016104e390612f9c565b610a85838383611bf3565b60006001600160e01b03198216636cdb3d1360e11b14806111e257506001600160e01b031982166303a24d0760e21b145b80610511575061051182611cf9565b60006111fd8383611d49565b9392505050565b6001600160a01b03841661122a5760405162461bcd60e51b81526004016104e390613019565b336112448160008761123b88611d81565b61084288611d81565b60008481526004602090815260408083206001600160a01b038916845290915281208054859290611276908490613121565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461084281600087878787611dda565b81518351146112f75760405162461bcd60e51b81526004016104e390612fd1565b6001600160a01b03841661131d5760405162461bcd60e51b81526004016104e390612eca565b3360005b845181101561142357600085828151811061134c57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061137857634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526004835260408082206001600160a01b038e1683529093529190912054909150818110156113c95760405162461bcd60e51b81526004016104e390612f52565b60008381526004602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611408908490613121565b925050819055505050508061141c906131f0565b9050611321565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611473929190612dfd565b60405180910390a4611004818787878787611f45565b60005b8151811015610a4c5760008282815181106114b757634e487b7160e01b600052603260045260246000fd5b60200260200101519050612710816040015161ffff16106115085760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016104e3565b60208101516001600160a01b0316611581578051600090815260016020526040902080546001600160b01b031916905580516115469060029061200f565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611649565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152600190945294909220925183549451909216600160a01b026001600160b01b031990941691161791909117905580516115ef9060029061201b565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080611654816131f0565b91505061148c565b6001600160a01b0383166116825760405162461bcd60e51b81526004016104e390612f0f565b80518251146116a35760405162461bcd60e51b81526004016104e390612fd1565b604080516020810190915260009081905233905b83518110156117985760008482815181106116e257634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061170e57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526004835260408082206001600160a01b038c16835290935291909120549091508181101561175f5760405162461bcd60e51b81526004016104e390612e86565b60009283526004602090815260408085206001600160a01b038b1686529091529092209103905580611790816131f0565b9150506116b7565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516117e9929190612dfd565b60405180910390a450505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610511825490565b61186e85858560405180602001604052806000815250611204565b6000848152600860205260409020611004908383612217565b6001600160a01b0384166118ad5760405162461bcd60e51b81526004016104e390613019565b81518351146118ce5760405162461bcd60e51b81526004016104e390612fd1565b3360005b8451811015611987578381815181106118fb57634e487b7160e01b600052603260045260246000fd5b60200260200101516004600087848151811061192757634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461196f9190613121565b9091555081905061197f816131f0565b9150506118d2565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516119d8929190612dfd565b60405180910390a461084281600087878787611f45565b612710816020015161ffff1610611a365760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016104e3565b60408051808201825282516001600160a01b03168082526020808501805161ffff169190930181905260008054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe4192611ac792916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b6001600160a01b038416611af85760405162461bcd60e51b81526004016104e390612eca565b33611b0881878761123b88611d81565b60008481526004602090815260408083206001600160a01b038a16845290915290205483811015611b4b5760405162461bcd60e51b81526004016104e390612f52565b60008581526004602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611b8a908490613121565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611bea828888888888611dda565b50505050505050565b6001600160a01b038316611c195760405162461bcd60e51b81526004016104e390612f0f565b33611c4981856000611c2a87611d81565b611c3387611d81565b5050604080516020810190915260009052505050565b60008381526004602090815260408083206001600160a01b038816845290915290205482811015611c8c5760405162461bcd60e51b81526004016104e390612e86565b60008481526004602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b0319821663152a902d60e11b1480611d2a57506001600160e01b0319821663c69dbd8f60e01b145b8061051157506301ffc9a760e01b6001600160e01b0319831614610511565b6000826000018281548110611d6e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611dc957634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156110045760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611e1e9089908990889088908890600401612da5565b602060405180830381600087803b158015611e3857600080fd5b505af1925050508015611e68575060408051601f3d908101601f19168201909252611e6591810190612b9a565b60015b611f1557611e74613237565b806308c379a01415611eae5750611e8961324f565b80611e945750611eb0565b8060405162461bcd60e51b81526004016104e39190612e2b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016104e3565b6001600160e01b0319811663f23a6e6160e01b14611bea5760405162461bcd60e51b81526004016104e390612e3e565b6001600160a01b0384163b156110045760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611f899089908990889088908890600401612d47565b602060405180830381600087803b158015611fa357600080fd5b505af1925050508015611fd3575060408051601f3d908101601f19168201909252611fd091810190612b9a565b60015b611fdf57611e74613237565b6001600160e01b0319811663bc197c8160e01b14611bea5760405162461bcd60e51b81526004016104e390612e3e565b60006111fd8383612027565b60006111fd8383612144565b6000818152600183016020526040812054801561213a57600061204b600183613178565b855490915060009061205f90600190613178565b90508181146120e057600086600001828154811061208d57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106120be57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120ff57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610511565b6000915050610511565b600081815260018301602052604081205461218b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610511565b506000610511565b82805461219f9061318f565b90600052602060002090601f0160209004810192826121c15760008555612207565b82601f106121da57805160ff1916838001178555612207565b82800160010185558215612207579182015b828111156122075782518255916020019190600101906121ec565b5061221392915061228b565b5090565b8280546122239061318f565b90600052602060002090601f0160209004810192826122455760008555612207565b82601f1061225e5782800160ff19823516178555612207565b82800160010185558215612207579182015b82811115612207578235825591602001919060010190612270565b5b80821115612213576000815560010161228c565b60006001600160401b038311156122b9576122b9613221565b6040516122d0601f8501601f1916602001826131c4565b8091508381528484840111156122e557600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b038116811461231457600080fd5b919050565b600082601f830112612329578081fd5b81356020612336826130fe565b60405161234382826131c4565b8381528281019150858301600585901b87018401881015612362578586fd5b855b8581101561238757612375826122fd565b84529284019290840190600101612364565b5090979650505050505050565b60008083601f8401126123a5578182fd5b5081356001600160401b038111156123bb578182fd5b6020830191508360208260051b85010111156107ab57600080fd5b600082601f8301126123e6578081fd5b813560206123f3826130fe565b60405161240082826131c4565b8381528281019150858301600585901b8701840188101561241f578586fd5b855b858110156123875761243282612509565b84529284019290840190600101612421565b600082601f830112612454578081fd5b81356020612461826130fe565b60405161246e82826131c4565b8381528281019150858301600585901b8701840188101561248d578586fd5b855b858110156123875781358452928401929084019060010161248f565b600082601f8301126124bb578081fd5b6111fd838335602085016122a0565b60008083601f8401126124db578182fd5b5081356001600160401b038111156124f1578182fd5b6020830191508360208285010111156107ab57600080fd5b803561ffff8116811461231457600080fd5b60006020828403121561252c578081fd5b6111fd826122fd565b60008060408385031215612547578081fd5b612550836122fd565b915061255e602084016122fd565b90509250929050565b600080600080600060a0868803121561257e578081fd5b612587866122fd565b9450612595602087016122fd565b935060408601356001600160401b03808211156125b0578283fd5b6125bc89838a01612444565b945060608801359150808211156125d1578283fd5b6125dd89838a01612444565b935060808801359150808211156125f2578283fd5b506125ff888289016124ab565b9150509295509295909350565b600080600080600060a08688031215612623578283fd5b61262c866122fd565b945061263a602087016122fd565b9350604086013592506060860135915060808601356001600160401b03811115612662578182fd5b6125ff888289016124ab565b60008060008060008060008060c0898b031215612689578586fd5b612692896122fd565b975060208901356001600160401b03808211156126ad578788fd5b6126b98c838d01612444565b985060408b01359150808211156126ce578788fd5b6126da8c838d01612394565b909850965060608b01359150808211156126f2578485fd5b6126fe8c838d01612319565b955060808b0135915080821115612713578485fd5b61271f8c838d016123d6565b945060a08b0135915080821115612734578384fd5b506127418b828c01612394565b999c989b5096995094979396929594505050565b600080600060608486031215612769578081fd5b612772846122fd565b925060208401356001600160401b038082111561278d578283fd5b61279987838801612444565b935060408601359150808211156127ae578283fd5b506127bb86828701612444565b9150509250925092565b6000806000806000608086880312156127dc578283fd5b6127e5866122fd565b945060208601356001600160401b0380821115612800578485fd5b61280c89838a01612444565b95506040880135915080821115612821578485fd5b61282d89838a01612444565b94506060880135915080821115612842578283fd5b5061284f888289016124ca565b969995985093965092949392505050565b600080600060608486031215612874578081fd5b61287d846122fd565b925060208401356001600160401b0380821115612898578283fd5b6128a487838801612444565b935060408601359150808211156128b9578283fd5b508401601f810186136128ca578182fd5b6127bb868235602084016122a0565b600080604083850312156128eb578182fd5b6128f4836122fd565b915060208301358015158114612908578182fd5b809150509250929050565b60008060408385031215612925578182fd5b61292e836122fd565b946020939093013593505050565b60008060008060608587031215612951578182fd5b61295a856122fd565b93506020850135925060408501356001600160401b0381111561297b578283fd5b612987878288016124ca565b95989497509550505050565b60008060008060008060008060c0898b0312156129ae578182fd5b6129b7896122fd565b97506020890135965060408901356001600160401b03808211156129d9578384fd5b6129e58c838d016124ca565b90985096508691506129f960608c016122fd565b9550612a0760808c01612509565b945060a08b0135915080821115612a1c578384fd5b506127418b828c016124ca565b600080600060608486031215612a3d578081fd5b612a46846122fd565b95602085013595506040909401359392505050565b600080600080600060808688031215612a72578283fd5b612a7b866122fd565b9450602086013593506040860135925060608601356001600160401b03811115612aa3578182fd5b61284f888289016124ca565b60008060408385031215612ac1578182fd5b82356001600160401b0380821115612ad7578384fd5b612ae386838701612319565b93506020850135915080821115612af8578283fd5b50612b0585828601612444565b9150509250929050565b60008060208385031215612b21578182fd5b82356001600160401b0380821115612b37578384fd5b818501915085601f830112612b4a578384fd5b813581811115612b58578485fd5b866020606083028501011115612b6c578485fd5b60209290920196919550909350505050565b600060208284031215612b8f578081fd5b81356111fd816132d8565b600060208284031215612bab578081fd5b81516111fd816132d8565b600060608284031215612bc7578081fd5b604051606081018181106001600160401b0382111715612be957612be9613221565b60405282358152612bfc602084016122fd565b6020820152612c0d60408401612509565b60408201529392505050565b600060408284031215612c2a578081fd5b50919050565b600060408284031215612c41578081fd5b604051604081018181106001600160401b0382111715612c6357612c63613221565b604052612c6f836122fd565b8152612c7d60208401612509565b60208201529392505050565b600060208284031215612c9a578081fd5b5035919050565b60008060408385031215612cb3578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015612cf157815187529582019590820190600101612cd5565b509495945050505050565b60008151808452815b81811015612d2157602081850181015186830182015201612d05565b81811115612d325782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090612d7390830186612cc2565b8281036060840152612d858186612cc2565b90508281036080840152612d998185612cfc565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ddf90830184612cfc565b979650505050505050565b6020815260006111fd6020830184612cc2565b604081526000612e106040830185612cc2565b8281036020840152612e228185612cc2565b95945050505050565b6020815260006111fd6020830184612cfc565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b8681526001600160a01b03868116602083015260a0604083018190528201859052600090858760c08501378160c0878501015260c0601f19601f880116840101915080851660608401525061ffff83166080830152979650505050505050565b6000808335601e198436030181126130d0578283fd5b8301803591506001600160401b038211156130e9578283fd5b6020019150368190038213156107ab57600080fd5b60006001600160401b0382111561311757613117613221565b5060051b60200190565b600082198211156131345761313461320b565b500190565b60008261315457634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156131735761317361320b565b500290565b60008282101561318a5761318a61320b565b500390565b600181811c908216806131a357607f821691505b60208210811415612c2a57634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b03811182821017156131e9576131e9613221565b6040525050565b60006000198214156132045761320461320b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561324c57600481823e5160e01c5b90565b600060443d101561325d5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561328c57505050505090565b82850191508151818111156132a45750505050505090565b843d87010160208285010111156132be5750505050505090565b6132cd602082860101876131c4565b509095945050505050565b6001600160e01b03198116811461104d57600080fdfea264697066735822122044a2f2129e2dd2e729c0a9fef915711eb3aded91157c777c38fd357885a93b1a64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a85760003560e01c80637885fdc7116100f9578063e985e9c511610097578063f02a085711610071578063f02a08571461042f578063f242432a14610442578063f2fde38b14610455578063f5298aca1461046857600080fd5b8063e985e9c5146103cd578063eb44350e14610409578063ef60ceaf1461041c57600080fd5b80639ca19ca5116100d35780639ca19ca514610381578063a22cb46514610394578063b5280188146103a7578063d3fc9864146103ba57600080fd5b80637885fdc71461031c5780637e9803421461035e5780638da5cb5b1461036657600080fd5b80632eb2c2d6116101665780635136dcc7116101405780635136dcc7146102e557806361bc221a146102f85780636b20c45414610301578063715018a61461031457600080fd5b80632eb2c2d61461029f57806331a99766146102b25780634e1273f4146102c557600080fd5b8062fdd58e146101ad57806301ffc9a7146101d35780630653aca5146101f65780630e89341c146102385780632a3a75fe146102585780632a55205a1461026d575b600080fd5b6101c06101bb366004612913565b61047b565b6040519081526020015b60405180910390f35b6101e66101e1366004612b7e565b610517565b60405190151581526020016101ca565b610209610204366004612c89565b610522565b60408051825181526020808401516001600160a01b0316908201529181015161ffff16908201526060016101ca565b61024b610246366004612c89565b6105a7565b6040516101ca9190612e2b565b61026b610266366004612860565b610649565b005b61028061027b366004612ca1565b6106ed565b604080516001600160a01b0390931683526020830191909152016101ca565b61026b6102ad366004612567565b6107b2565b61024b6102c0366004612c89565b610849565b6102d86102d3366004612aaf565b610866565b6040516101ca9190612dea565b61026b6102f3366004612b0f565b6109c7565b6101c060095481565b61026b61030f366004612755565b610a50565b61026b610a8a565b60005461033c906001600160a01b03811690600160a01b900461ffff1682565b604080516001600160a01b03909316835261ffff9091166020830152016101ca565b6101c0610ac0565b6007546040516001600160a01b0390911681526020016101ca565b61026b61038f366004612993565b610ad1565b61026b6103a23660046128d9565b610c0a565b61026b6103b536600461266e565b610ce1565b61026b6103c836600461293c565b610f58565b6101e66103db366004612535565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61026b6104173660046127c5565b610f81565b61026b61042a366004612c19565b61100c565b61026b61043d366004612a5b565b611050565b61026b61045036600461260c565b61105d565b61026b61046336600461251b565b6110e4565b61026b610476366004612a29565b61117c565b60006001600160a01b0383166104ec5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526004602090815260408083206001600160a01b03861684529091529020545b92915050565b6000610511826111b1565b604080516060810182526000808252602082018190529181018290529061054a6002846111f1565b6000818152600160209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b60008181526008602052604090208054606091906105c49061318f565b80601f01602080910402602001604051908101604052809291908181526020018280546105f09061318f565b801561063d5780601f106106125761010080835404028352916020019161063d565b820191906000526020600020905b81548152906001019060200180831161062057829003601f168201915b50505050509050919050565b60016009600082825461065c9190613121565b90915550600090505b82518110156106e7576106b28460095485848151811061069557634e487b7160e01b600052603260045260246000fd5b602002602001015160405180602001604052806000815250611204565b600954600090815260086020908152604090912083516106d492850190612193565b50806106df816131f0565b915050610665565b50505050565b60008281526001602052604081205481906001600160a01b031615610752576000848152600160205260409020546001600160a01b038116906127109061073f90600160a01b900461ffff1686613159565b6107499190613139565b915091506107ab565b6000546001600160a01b0316158015906107785750600054600160a01b900461ffff1615155b156107a4576000546001600160a01b038116906127109061073f90600160a01b900461ffff1686613159565b5060009050805b9250929050565b6001600160a01b0385163314806107ce57506107ce85336103db565b6108355760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016104e3565b61084285858585856112d6565b5050505050565b6000818152600a602052604090208054606091906105c49061318f565b606081518351146108cb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016104e3565b600083516001600160401b038111156108f457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561091d578160200160208202803683370190505b50905060005b84518110156109bf5761098485828151811061094f57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061097757634e487b7160e01b600052603260045260246000fd5b602002602001015161047b565b8282815181106109a457634e487b7160e01b600052603260045260246000fd5b60209081029190910101526109b8816131f0565b9050610923565b509392505050565b6007546001600160a01b031633146109f15760405162461bcd60e51b81526004016104e390612f9c565b610a4c8282808060200260200160405190810160405280939291908181526020016000905b82821015610a4257610a3360608302860136819003810190612bb6565b81526020019060010190610a16565b5050505050611489565b5050565b6007546001600160a01b03163314610a7a5760405162461bcd60e51b81526004016104e390612f9c565b610a8583838361165c565b505050565b6007546001600160a01b03163314610ab45760405162461bcd60e51b81526004016104e390612f9c565b610abe60006117f7565b565b6000610acc6002611849565b905090565b600160096000828254610ae49190613121565b92505081905550610afa88600954898989611853565b604080516001808252818301909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610b1157905050905060405180606001604052806009548152602001866001600160a01b031681526020018561ffff1681525081600081518110610b8b57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250610b9f81611489565b6009546000908152600a60205260409020610bbb908484612217565b507f267de29c492da4634a7dca78204318a76a0a7c47341583b654a8a637f3f2658f6009548a89898989604051610bf79695949392919061305a565b60405180910390a1505050505050505050565b336001600160a01b0383161415610c755760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016104e3565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b86518514610d315760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e747320616e6420757269206c656e677468206d69736d617463680060448201526064016104e3565b8351875114610d955760405162461bcd60e51b815260206004820152602a60248201527f616d6f756e747320616e6420726f79616c747941646472657373206c656e67746044820152690d040dad2e6dac2e8c6d60b31b60648201526084016104e3565b8251875114610de65760405162461bcd60e51b815260206004820181905260248201527f616d6f756e747320616e6420616d6f756e747320627073206d69736d6174636860448201526064016104e3565b86518114610e4f5760405162461bcd60e51b815260206004820152603060248201527f616d6f756e747320616e642070726f6f664f6641757468656e7469636974795f60448201526f040d8cadccee8d040dad2e6dac2e8c6d60831b60648201526084016104e3565b60005b8751811015610f4d57610f3b89898381518110610e7f57634e487b7160e01b600052603260045260246000fd5b6020026020010151898985818110610ea757634e487b7160e01b600052603260045260246000fd5b9050602002810190610eb991906130ba565b898681518110610ed957634e487b7160e01b600052603260045260246000fd5b6020026020010151898781518110610f0157634e487b7160e01b600052603260045260246000fd5b6020026020010151898989818110610f2957634e487b7160e01b600052603260045260246000fd5b905060200281019061038f91906130ba565b80610f45816131f0565b915050610e52565b505050505050505050565b600160096000828254610f6b9190613121565b925050819055506106e784600954858585611853565b610f9c85858560405180602001604052806000815250611887565b60005b845181101561100457828260086000888581518110610fce57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000209190610ff1929190612217565b5080610ffc816131f0565b915050610f9f565b505050505050565b6007546001600160a01b031633146110365760405162461bcd60e51b81526004016104e390612f9c565b61104d61104836839003830183612c30565b6119ef565b50565b6108428585858585611853565b6001600160a01b038516331480611079575061107985336103db565b6110d75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104e3565b6108428585858585611ad2565b6007546001600160a01b0316331461110e5760405162461bcd60e51b81526004016104e390612f9c565b6001600160a01b0381166111735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104e3565b61104d816117f7565b6007546001600160a01b031633146111a65760405162461bcd60e51b81526004016104e390612f9c565b610a85838383611bf3565b60006001600160e01b03198216636cdb3d1360e11b14806111e257506001600160e01b031982166303a24d0760e21b145b80610511575061051182611cf9565b60006111fd8383611d49565b9392505050565b6001600160a01b03841661122a5760405162461bcd60e51b81526004016104e390613019565b336112448160008761123b88611d81565b61084288611d81565b60008481526004602090815260408083206001600160a01b038916845290915281208054859290611276908490613121565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461084281600087878787611dda565b81518351146112f75760405162461bcd60e51b81526004016104e390612fd1565b6001600160a01b03841661131d5760405162461bcd60e51b81526004016104e390612eca565b3360005b845181101561142357600085828151811061134c57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061137857634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526004835260408082206001600160a01b038e1683529093529190912054909150818110156113c95760405162461bcd60e51b81526004016104e390612f52565b60008381526004602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611408908490613121565b925050819055505050508061141c906131f0565b9050611321565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611473929190612dfd565b60405180910390a4611004818787878787611f45565b60005b8151811015610a4c5760008282815181106114b757634e487b7160e01b600052603260045260246000fd5b60200260200101519050612710816040015161ffff16106115085760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016104e3565b60208101516001600160a01b0316611581578051600090815260016020526040902080546001600160b01b031916905580516115469060029061200f565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611649565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152600190945294909220925183549451909216600160a01b026001600160b01b031990941691161791909117905580516115ef9060029061201b565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080611654816131f0565b91505061148c565b6001600160a01b0383166116825760405162461bcd60e51b81526004016104e390612f0f565b80518251146116a35760405162461bcd60e51b81526004016104e390612fd1565b604080516020810190915260009081905233905b83518110156117985760008482815181106116e257634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061170e57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526004835260408082206001600160a01b038c16835290935291909120549091508181101561175f5760405162461bcd60e51b81526004016104e390612e86565b60009283526004602090815260408085206001600160a01b038b1686529091529092209103905580611790816131f0565b9150506116b7565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516117e9929190612dfd565b60405180910390a450505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610511825490565b61186e85858560405180602001604052806000815250611204565b6000848152600860205260409020611004908383612217565b6001600160a01b0384166118ad5760405162461bcd60e51b81526004016104e390613019565b81518351146118ce5760405162461bcd60e51b81526004016104e390612fd1565b3360005b8451811015611987578381815181106118fb57634e487b7160e01b600052603260045260246000fd5b60200260200101516004600087848151811061192757634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461196f9190613121565b9091555081905061197f816131f0565b9150506118d2565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516119d8929190612dfd565b60405180910390a461084281600087878787611f45565b612710816020015161ffff1610611a365760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016104e3565b60408051808201825282516001600160a01b03168082526020808501805161ffff169190930181905260008054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe4192611ac792916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b6001600160a01b038416611af85760405162461bcd60e51b81526004016104e390612eca565b33611b0881878761123b88611d81565b60008481526004602090815260408083206001600160a01b038a16845290915290205483811015611b4b5760405162461bcd60e51b81526004016104e390612f52565b60008581526004602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611b8a908490613121565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611bea828888888888611dda565b50505050505050565b6001600160a01b038316611c195760405162461bcd60e51b81526004016104e390612f0f565b33611c4981856000611c2a87611d81565b611c3387611d81565b5050604080516020810190915260009052505050565b60008381526004602090815260408083206001600160a01b038816845290915290205482811015611c8c5760405162461bcd60e51b81526004016104e390612e86565b60008481526004602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b0319821663152a902d60e11b1480611d2a57506001600160e01b0319821663c69dbd8f60e01b145b8061051157506301ffc9a760e01b6001600160e01b0319831614610511565b6000826000018281548110611d6e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611dc957634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156110045760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611e1e9089908990889088908890600401612da5565b602060405180830381600087803b158015611e3857600080fd5b505af1925050508015611e68575060408051601f3d908101601f19168201909252611e6591810190612b9a565b60015b611f1557611e74613237565b806308c379a01415611eae5750611e8961324f565b80611e945750611eb0565b8060405162461bcd60e51b81526004016104e39190612e2b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016104e3565b6001600160e01b0319811663f23a6e6160e01b14611bea5760405162461bcd60e51b81526004016104e390612e3e565b6001600160a01b0384163b156110045760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611f899089908990889088908890600401612d47565b602060405180830381600087803b158015611fa357600080fd5b505af1925050508015611fd3575060408051601f3d908101601f19168201909252611fd091810190612b9a565b60015b611fdf57611e74613237565b6001600160e01b0319811663bc197c8160e01b14611bea5760405162461bcd60e51b81526004016104e390612e3e565b60006111fd8383612027565b60006111fd8383612144565b6000818152600183016020526040812054801561213a57600061204b600183613178565b855490915060009061205f90600190613178565b90508181146120e057600086600001828154811061208d57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106120be57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120ff57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610511565b6000915050610511565b600081815260018301602052604081205461218b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610511565b506000610511565b82805461219f9061318f565b90600052602060002090601f0160209004810192826121c15760008555612207565b82601f106121da57805160ff1916838001178555612207565b82800160010185558215612207579182015b828111156122075782518255916020019190600101906121ec565b5061221392915061228b565b5090565b8280546122239061318f565b90600052602060002090601f0160209004810192826122455760008555612207565b82601f1061225e5782800160ff19823516178555612207565b82800160010185558215612207579182015b82811115612207578235825591602001919060010190612270565b5b80821115612213576000815560010161228c565b60006001600160401b038311156122b9576122b9613221565b6040516122d0601f8501601f1916602001826131c4565b8091508381528484840111156122e557600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b038116811461231457600080fd5b919050565b600082601f830112612329578081fd5b81356020612336826130fe565b60405161234382826131c4565b8381528281019150858301600585901b87018401881015612362578586fd5b855b8581101561238757612375826122fd565b84529284019290840190600101612364565b5090979650505050505050565b60008083601f8401126123a5578182fd5b5081356001600160401b038111156123bb578182fd5b6020830191508360208260051b85010111156107ab57600080fd5b600082601f8301126123e6578081fd5b813560206123f3826130fe565b60405161240082826131c4565b8381528281019150858301600585901b8701840188101561241f578586fd5b855b858110156123875761243282612509565b84529284019290840190600101612421565b600082601f830112612454578081fd5b81356020612461826130fe565b60405161246e82826131c4565b8381528281019150858301600585901b8701840188101561248d578586fd5b855b858110156123875781358452928401929084019060010161248f565b600082601f8301126124bb578081fd5b6111fd838335602085016122a0565b60008083601f8401126124db578182fd5b5081356001600160401b038111156124f1578182fd5b6020830191508360208285010111156107ab57600080fd5b803561ffff8116811461231457600080fd5b60006020828403121561252c578081fd5b6111fd826122fd565b60008060408385031215612547578081fd5b612550836122fd565b915061255e602084016122fd565b90509250929050565b600080600080600060a0868803121561257e578081fd5b612587866122fd565b9450612595602087016122fd565b935060408601356001600160401b03808211156125b0578283fd5b6125bc89838a01612444565b945060608801359150808211156125d1578283fd5b6125dd89838a01612444565b935060808801359150808211156125f2578283fd5b506125ff888289016124ab565b9150509295509295909350565b600080600080600060a08688031215612623578283fd5b61262c866122fd565b945061263a602087016122fd565b9350604086013592506060860135915060808601356001600160401b03811115612662578182fd5b6125ff888289016124ab565b60008060008060008060008060c0898b031215612689578586fd5b612692896122fd565b975060208901356001600160401b03808211156126ad578788fd5b6126b98c838d01612444565b985060408b01359150808211156126ce578788fd5b6126da8c838d01612394565b909850965060608b01359150808211156126f2578485fd5b6126fe8c838d01612319565b955060808b0135915080821115612713578485fd5b61271f8c838d016123d6565b945060a08b0135915080821115612734578384fd5b506127418b828c01612394565b999c989b5096995094979396929594505050565b600080600060608486031215612769578081fd5b612772846122fd565b925060208401356001600160401b038082111561278d578283fd5b61279987838801612444565b935060408601359150808211156127ae578283fd5b506127bb86828701612444565b9150509250925092565b6000806000806000608086880312156127dc578283fd5b6127e5866122fd565b945060208601356001600160401b0380821115612800578485fd5b61280c89838a01612444565b95506040880135915080821115612821578485fd5b61282d89838a01612444565b94506060880135915080821115612842578283fd5b5061284f888289016124ca565b969995985093965092949392505050565b600080600060608486031215612874578081fd5b61287d846122fd565b925060208401356001600160401b0380821115612898578283fd5b6128a487838801612444565b935060408601359150808211156128b9578283fd5b508401601f810186136128ca578182fd5b6127bb868235602084016122a0565b600080604083850312156128eb578182fd5b6128f4836122fd565b915060208301358015158114612908578182fd5b809150509250929050565b60008060408385031215612925578182fd5b61292e836122fd565b946020939093013593505050565b60008060008060608587031215612951578182fd5b61295a856122fd565b93506020850135925060408501356001600160401b0381111561297b578283fd5b612987878288016124ca565b95989497509550505050565b60008060008060008060008060c0898b0312156129ae578182fd5b6129b7896122fd565b97506020890135965060408901356001600160401b03808211156129d9578384fd5b6129e58c838d016124ca565b90985096508691506129f960608c016122fd565b9550612a0760808c01612509565b945060a08b0135915080821115612a1c578384fd5b506127418b828c016124ca565b600080600060608486031215612a3d578081fd5b612a46846122fd565b95602085013595506040909401359392505050565b600080600080600060808688031215612a72578283fd5b612a7b866122fd565b9450602086013593506040860135925060608601356001600160401b03811115612aa3578182fd5b61284f888289016124ca565b60008060408385031215612ac1578182fd5b82356001600160401b0380821115612ad7578384fd5b612ae386838701612319565b93506020850135915080821115612af8578283fd5b50612b0585828601612444565b9150509250929050565b60008060208385031215612b21578182fd5b82356001600160401b0380821115612b37578384fd5b818501915085601f830112612b4a578384fd5b813581811115612b58578485fd5b866020606083028501011115612b6c578485fd5b60209290920196919550909350505050565b600060208284031215612b8f578081fd5b81356111fd816132d8565b600060208284031215612bab578081fd5b81516111fd816132d8565b600060608284031215612bc7578081fd5b604051606081018181106001600160401b0382111715612be957612be9613221565b60405282358152612bfc602084016122fd565b6020820152612c0d60408401612509565b60408201529392505050565b600060408284031215612c2a578081fd5b50919050565b600060408284031215612c41578081fd5b604051604081018181106001600160401b0382111715612c6357612c63613221565b604052612c6f836122fd565b8152612c7d60208401612509565b60208201529392505050565b600060208284031215612c9a578081fd5b5035919050565b60008060408385031215612cb3578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015612cf157815187529582019590820190600101612cd5565b509495945050505050565b60008151808452815b81811015612d2157602081850181015186830182015201612d05565b81811115612d325782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090612d7390830186612cc2565b8281036060840152612d858186612cc2565b90508281036080840152612d998185612cfc565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ddf90830184612cfc565b979650505050505050565b6020815260006111fd6020830184612cc2565b604081526000612e106040830185612cc2565b8281036020840152612e228185612cc2565b95945050505050565b6020815260006111fd6020830184612cfc565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b8681526001600160a01b03868116602083015260a0604083018190528201859052600090858760c08501378160c0878501015260c0601f19601f880116840101915080851660608401525061ffff83166080830152979650505050505050565b6000808335601e198436030181126130d0578283fd5b8301803591506001600160401b038211156130e9578283fd5b6020019150368190038213156107ab57600080fd5b60006001600160401b0382111561311757613117613221565b5060051b60200190565b600082198211156131345761313461320b565b500190565b60008261315457634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156131735761317361320b565b500290565b60008282101561318a5761318a61320b565b500390565b600181811c908216806131a357607f821691505b60208210811415612c2a57634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b03811182821017156131e9576131e9613221565b6040525050565b60006000198214156132045761320461320b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561324c57600481823e5160e01c5b90565b600060443d101561325d5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561328c57505050505090565b82850191508151818111156132a45750505050505090565b843d87010160208285010111156132be5750505050505090565b6132cd602082860101876131c4565b509095945050505050565b6001600160e01b03198116811461104d57600080fdfea264697066735822122044a2f2129e2dd2e729c0a9fef915711eb3aded91157c777c38fd357885a93b1a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getTokenRoyaltiesCount()": {
        "details": "See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}."
      },
      "getTokenRoyaltyByIndex(uint256)": {
        "details": "See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "See {IEIP2981RoyaltyOverride-royaltyInfo}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setDefaultRoyalty((address,uint16))": {
        "details": "Set a default royalty configuration.  Will be used if no token specific configuration is set"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2816,
        "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
        "label": "defaultRoyalty",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(TokenRoyalty)3125_storage"
      },
      {
        "astId": 2821,
        "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
        "label": "_tokenRoyalties",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(TokenRoyalty)3125_storage)"
      },
      {
        "astId": 2824,
        "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
        "label": "_tokensWithRoyalties",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintSet)2208_storage"
      },
      {
        "astId": 151,
        "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 157,
        "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 159,
        "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
        "label": "_uri",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2353,
        "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
        "label": "tokenToUri",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2355,
        "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
        "label": "counter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2359,
        "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
        "label": "_proofOfAuthenticity",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenRoyalty)3125_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IERC1155WithRoyalty.TokenRoyalty)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenRoyalty)3125_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Set)1750_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1745,
            "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1749,
            "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenRoyalty)3125_storage": {
        "encoding": "inplace",
        "label": "struct IERC1155WithRoyalty.TokenRoyalty",
        "members": [
          {
            "astId": 3122,
            "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3124,
            "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
            "label": "bps",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)2208_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2207,
            "contract": "contracts/ERC1155WithRoyalty.sol:ERC1155WithRoyalty",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1750_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
